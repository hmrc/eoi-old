Option Compare Database   'Use database order for string comparisons

Option Explicit

Global Const cLELEmployee = 1
Global Const cLELEmployer = 2
Global Const cUELEmployee = 3
Global Const cUELEmployer = 4
Global Const cAboveUEL = 5

Global Const cNoAPP = 1
Global Const cYesAPP = 2

Global Const cAnnualEarnings = 1
Global Const cProRataEarnings = 2


'Global NIRateBandTable As DAO.Recordset
'Global Class1RateTable As DAO.Recordset
Global FirstLine As Integer

Sub Annual_Band(ByVal nYear As Integer, ByVal nTotal_Earnings As Currency, nBand As Integer, txtLEL As Currency, txtUEL As Currency)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : Annual_Band
' Purpose       : To get the Band, LEL and UEL for the specified year, in an auunal period

    Dim myDB As Database, mySet As DAO.Recordset
    Dim sYear As String, SQLQuery As String

    On Error GoTo Err_Annual_Band

    ' Need to convert Tax Yr into a string, without a leading space
    sYear = Mid(Str(nYear), 2, 5)

    ' Query to get the Annual Bands for [Tax Yr]
    SQLQuery = "SELECT * FROM [BAND TABLE] WHERE [Tax Yr] = '" + sYear + "';"
    
    Set myDB = DBEngine.Workspaces(0).Databases(0)
    Set mySet = myDB.OpenRecordset(SQLQuery)
    

    ' Extract the Band and its Limit, for the earnings
    nBand = 0
    If nTotal_Earnings >= mySet![Ann Band 1] Then
        nBand = 1
        If nTotal_Earnings >= mySet![Ann Band 2] Then
            nBand = 2
            If nTotal_Earnings >= mySet![Ann Band 3] Then
                nBand = 3
                If nTotal_Earnings >= mySet![Ann Band 4] Then
                    nBand = 4
                End If
            End If
        End If
    End If

    ' Lower and Uppper Earnings Limits
    txtLEL = mySet![Ann Band 1]
    txtUEL = mySet![Ann Band 5]

Exit_Annual_Band:
    Exit Sub

Err_Annual_Band:
    MsgBox Error$
    Resume Exit_Annual_Band

End Sub

Sub Banding(ByVal bEarningsPeriod As Integer, ByVal nYear As Integer, ByVal nNumberOfWeeks As Integer, ByVal nTotal_Gross_Pay As Currency, nBand As Integer, txtLEL As Currency, txtUEL As Currency)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : Banding
' Purpose       : To extract Band, LEL and UEL, by calling annual or pro-rata earnings period
    
    On Error GoTo Err_Banding

    ' Invoke Annual or pro-rata earnings period
    If bEarningsPeriod = cAnnualEarnings Then
        Annual_Band nYear, nTotal_Gross_Pay, nBand, txtLEL, txtUEL
    Else
        Pro_Rata_Band nYear, nNumberOfWeeks, nTotal_Gross_Pay, nBand, txtLEL, txtUEL
    End If

Exit_Banding:
    Exit Sub

Err_Banding:
    MsgBox Error$
    Resume Exit_Banding

End Sub

Function bSettingsCorrect() As Integer
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : bSettingsCorrect
' Purpose       : Ensure TaxYear, APP, EarningsPeriod and Start Of Directorship set if applicable
' History Date  : 12 June 1995
'               : Check that Directorship start date wthin tax year
' History Date  : 9 October 1995
'               : Check From and To of Directorship
' History Date  : 19 October 1995
'               : Check From and To under all cases
' History Date  : 3 November 1995
'               : Pro-rata, first first tax day

    Dim dStart, dFrom, dTo

    On Error GoTo Err_bSettingsCorrect

    ' Check nTaxYear set
    If IsNull(Forms![frmDirectorsMain]![cboTaxYear]) Then
        Beep
        MsgBox ("Please set the Tax Year")
        Forms![frmDirectorsMain]!cboTaxYear.SetFocus
        bSettingsCorrect = False
        Exit Function
    End If

    ' Check APP option set
    If IsNull(Forms![frmDirectorsMain].[optAPP]) Then
        Beep
        MsgBox ("Please set whether 'APP' or 'No App'")
        Forms![frmDirectorsMain]!optAPP.SetFocus
        bSettingsCorrect = False
        Exit Function
    End If

    ' Check Earnings Period set
    If IsNull(Forms![frmDirectorsMain].[optEarningsPeriod]) Then
        Beep
        MsgBox ("Please set the Earnings Period")
        Forms![frmDirectorsMain]!optEarningsPeriod.SetFocus
        bSettingsCorrect = False
        Exit Function
    End If
    
    
    ' Check From Directorship set
    If Forms![frmDirectorsMain].[optEarningsPeriod] = cProRataEarnings And IsNull(Forms![frmDirectorsMain]![dtDirectorshipFrom]) Then
        Beep
        MsgBox ("Please set Directorship From:")
        Forms![frmDirectorsMain]!dtDirectorshipFrom.SetFocus
        bSettingsCorrect = False
        Exit Function
    End If
    
    ' Check To Directorship set
    If Forms![frmDirectorsMain].[optEarningsPeriod] = cProRataEarnings And IsNull(Forms![frmDirectorsMain]![dtDirectorshipTo]) Then
        Beep
        MsgBox ("Please set Directorship To:")
        Forms![frmDirectorsMain]!dtDirectorshipTo.SetFocus
        bSettingsCorrect = False
        Exit Function
    End If

    
    ' Check Directorship's From & To dates within tax year
                
        ' Check Directorship's From date within tax year
        dStart = Val((Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "yyyymmdd")))
        dFrom = Val(Str$(Forms![frmDirectorsMain]![cboTaxYear]) + "0406")
        dTo = Val(Str$(Forms![frmDirectorsMain]![cboTaxYear] + 1) + "0405")
        If dStart < dFrom Or dStart > dTo Then
            Beep
            MsgBox ("Directorship From: not within tax year")
            Forms![frmDirectorsMain]!dtDirectorshipFrom.SetFocus
            bSettingsCorrect = False
            Exit Function
        End If

        ' Check Pro-rata's Directorship's From date beyond first tax day
        dStart = Val((Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "yyyymmdd")))
        dFrom = Val(Str$(Forms![frmDirectorsMain]![cboTaxYear]) + "0406")
        dTo = Val(Str$(Forms![frmDirectorsMain]![cboTaxYear] + 1) + "0405")
        If (Forms![frmDirectorsMain].[optEarningsPeriod] = cProRataEarnings) And (dStart <= dFrom Or dStart > dTo) Then
            Beep
            MsgBox ("Directorship From: (Pro Rata) not within tax year excluding first tax day")
            Forms![frmDirectorsMain]!dtDirectorshipFrom.SetFocus
            bSettingsCorrect = False
            Exit Function
        End If


    ' Check Directorship's To dates within tax year and >= From date
        
        ' Check within tax year
        dStart = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipTo, "yyyymmdd"))
        dFrom = Val(Str$(Forms![frmDirectorsMain]![cboTaxYear]) + "0406")
        dTo = Val(Str$(Forms![frmDirectorsMain]![cboTaxYear] + 1) + "0405")
        If dStart < dFrom Or dStart > dTo Then
            Beep
            MsgBox ("Directorship To: not within tax year")
            Forms![frmDirectorsMain]!dtDirectorshipTo.SetFocus
            bSettingsCorrect = False
            Exit Function
        End If

        ' Check >= From
        dFrom = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "yyyymmdd"))
        dTo = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipTo, "yyyymmdd"))
        If dFrom > dTo Then
            Beep
            MsgBox ("Directorship To: Date must be greater than or equal to From date")
            Forms![frmDirectorsMain]!dtDirectorshipTo.SetFocus
            bSettingsCorrect = False
            Exit Function
        End If
    

    bSettingsCorrect = True

Exit_bSettingsCorrect:
    Exit Function

Err_bSettingsCorrect:
    MsgBox Error$
    Resume Exit_bSettingsCorrect

End Function

Function bSettingsCorrect01(frmName As Form)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : bSettingsCorrect
' Purpose       : Ensure TaxYear, APP, EarningsPeriod and Start Of Directorship set if applicable
' History Date  : 12 June 1995
'               : Check that Directorship start date wthin tax year
' History Date  : 9 October 1995
'               : Check From and To of Directorship
' History Date  : 19 October 1995
'               : Check From and To under all cases
' History Date  : 3 November 1995
'               : Pro-rata, first first tax day
' Author        : Peter Morton
' Date          : 04 Jan 2000
' Purpose       : Function renamed and modified for 2001 form
' Author        : Chris Sneddon
' Date          : 25 jan 2012
' Purpose       : modified functions to detect missing Category



    Dim dStart, dFrom, dTo

    On Error GoTo Err_bSettingsCorrect01

    ' Check nTaxYear set
    If IsNull(Forms(frmName.Name)![cboTaxYear]) Then
        Beep
        MsgBox ("Please set the Tax Year")
        Forms(frmName.Name)!cboTaxYear.SetFocus
        bSettingsCorrect01 = False
        Exit Function
    End If

    'Check if category is set
  '  If Form_fsubDirectors09!cboCategory.cboCategory = " " Then
  '  MsgBox "test"
  '  End If
    'If IsNull(Forms(frmName.Name)![cboCategory]) Then
    '    Beep
    '    MsgBox ("Please set the Tax Year")
    '    Forms(frmName.Name)!cboCategory.SetFocus
    '    bSettingsCorrect01 = False
    '    Exit Function
    'End If

    ' Check APP option set
    If IsNull(Forms(frmName.Name).[optAPP]) Then
        Beep
        MsgBox ("Please set whether 'APP' or 'No App'")
        Forms(frmName.Name)!optAPP.SetFocus
        bSettingsCorrect01 = False
        Exit Function
    End If

    ' Check Earnings Period set
    If IsNull(Forms(frmName.Name).[optEarningsPeriod]) Then
        Beep
        MsgBox ("Please set the Earnings Period")
        Forms(frmName.Name)!optEarningsPeriod.SetFocus
        bSettingsCorrect01 = False
        Exit Function
    End If
    
    
    ' Check From Directorship set
    If Forms(frmName.Name).[optEarningsPeriod] = cProRataEarnings And IsNull(Forms(frmName.Name)![dtDirectorshipFrom]) Then
        Beep
        MsgBox ("Please set Directorship From:")
        Forms(frmName.Name)!dtDirectorshipFrom.SetFocus
        bSettingsCorrect01 = False
        Exit Function
    End If
    
    ' Check To Directorship set
    If Forms(frmName.Name).[optEarningsPeriod] = cProRataEarnings And IsNull(Forms(frmName.Name)![dtDirectorshipTo]) Then
        Beep
        MsgBox ("Please set Directorship To:")
        Forms(frmName.Name)!dtDirectorshipTo.SetFocus
        bSettingsCorrect01 = False
        Exit Function
    End If

    
    ' Check Directorship's From & To dates within tax year
                
        ' Check Directorship's From date within tax year
        dStart = Val((Format$(Forms(frmName.Name)!dtDirectorshipFrom, "yyyymmdd")))
        dFrom = Val(Str$(Forms(frmName.Name)![cboTaxYear]) + "0406")
        dTo = Val(Str$(Forms(frmName.Name)![cboTaxYear] + 1) + "0405")
        If dStart < dFrom Or dStart > dTo Then
            Beep
            MsgBox ("Directorship From: not within tax year")
            Forms(frmName.Name)!dtDirectorshipFrom.SetFocus
            bSettingsCorrect01 = False
            Exit Function
        End If

        ' Check Pro-rata's Directorship's From date beyond first tax day
        dStart = Val((Format$(Forms(frmName.Name)!dtDirectorshipFrom, "yyyymmdd")))
        dFrom = Val(Str$(Forms(frmName.Name)![cboTaxYear]) + "0406")
        dTo = Val(Str$(Forms(frmName.Name)![cboTaxYear] + 1) + "0405")
        If (Forms(frmName.Name).[optEarningsPeriod] = cProRataEarnings) And (dStart <= dFrom Or dStart > dTo) Then
            Beep
            MsgBox ("Directorship From: (Pro Rata) not within tax year excluding first tax day")
            Forms(frmName.Name)!dtDirectorshipFrom.SetFocus
            bSettingsCorrect01 = False
            Exit Function
        End If


    ' Check Directorship's To dates within tax year and >= From date
        
        ' Check within tax year
        dStart = Val(Format$(Forms(frmName.Name)!dtDirectorshipTo, "yyyymmdd"))
        dFrom = Val(Str$(Forms(frmName.Name)![cboTaxYear]) + "0406")
        dTo = Val(Str$(Forms(frmName.Name)![cboTaxYear] + 1) + "0405")
        If dStart < dFrom Or dStart > dTo Then
            Beep
            MsgBox ("Directorship To: not within tax year")
            Forms(frmName.Name)!dtDirectorshipTo.SetFocus
            bSettingsCorrect01 = False
            Exit Function
        End If

        ' Check >= From
        dFrom = Val(Format$(Forms(frmName.Name)!dtDirectorshipFrom, "yyyymmdd"))
        dTo = Val(Format$(Forms(frmName.Name)!dtDirectorshipTo, "yyyymmdd"))
        If dFrom > dTo Then
            Beep
            MsgBox ("Directorship To: Date must be greater than or equal to From date")
            Forms(frmName.Name)!dtDirectorshipTo.SetFocus
            bSettingsCorrect01 = False
            Exit Function
        End If
    

    bSettingsCorrect01 = True

Exit_bSettingsCorrect01:
    Exit Function

Err_bSettingsCorrect01:
    MsgBox Error$
    Resume Exit_bSettingsCorrect01

End Function

Sub calcDirectorsTotals()

On Error GoTo Err_calcDirectorsTotals
Dim Rebate As Currency
Dim Employerspayment As Currency
Dim Employeespayment As Currency
Dim Totalpayment As Currency

With Forms!frmDirectorsMain
    'cater for user deleting these entires
    If IsNull(![nNITotalPaid]) Then
        ![nNITotalPaid] = 0
    End If
    If IsNull(![nEENITotalPaid]) Then
        ![nEENITotalPaid] = 0
    End If
    If IsNull(![nERNITotalPaid]) Then
        ![nERNITotalPaid] = 0
    End If
    
    If IsNull(![txtRebate1Paid]) Then
        ![txtRebate1Paid] = 0
    End If
    
    If IsNull(![txtRebate2Paid]) Then
        ![txtRebate2Paid] = 0
    End If
    
    
    !nTotalEEContributions = !DirectorsContributions.Form!EmployeeTotal
    !nTotalERContributions = !DirectorsContributions.Form!EmployerTotal
    
    If !cboTaxYear = 1999 Then
        !txtTotalRebate1 = !DirectorsContributions.Form!txtRebateTotal
    ElseIf !cboTaxYear > 1999 Then
        !txtTotalRebate1 = !DirectorsContributions.Form!txtRebate1Total
        !txtTotalRebate2 = !DirectorsContributions.Form!txtRebate2Total
    End If
    
    !nTotalContributions = !nTotalEEContributions + !nTotalERContributions
    
    CalculateERNIPaid
    
    
EmployerTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employers Over/Under payment
    '_______________________________________________________________________________________
    
    Employerspayment = ![nTotalERContributions] - ![nERNITotalPaid]
    
    If Employerspayment < 0 Then
        ![nERNIUnderpayment] = 0
        ![nERNIOverpayment] = -(Employerspayment)
    Else
        ![nERNIUnderpayment] = Employerspayment
        ![nERNIOverpayment] = 0
    End If
    
        
    
    
EmployeeTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employees Over/Under payment
    '_______________________________________________________________________________________
    
    Employeespayment = ![nTotalEEContributions] - ![nEENITotalPaid]
    
    If Employeespayment < 0 Then
        ![nEENIUnderpayment] = 0
        ![nEENIOverpayment] = -(Employeespayment)
    Else
        ![nEENIUnderpayment] = Employeespayment
        ![nEENIOverpayment] = 0
    End If
    
    'EmployerRebate:
    '_______________________________________________________________________________________
    
    ' This section calculates the Rebate Over/Under payment
    '_______________________________________________________________________________________
    
    
    Rebate = ![txtTotalRebate1] - ![txtRebate1Paid]
    
    If Rebate < 0 Then
        ![txtRebate1UnderPaid] = -(Rebate)
        ![txtRebate1OverPaid] = 0
    Else
        ![txtRebate1UnderPaid] = 0
        ![txtRebate1OverPaid] = Rebate
    End If
    
    If !cboTaxYear > 1999 Then
    
        Rebate = ![txtTotalRebate2] - ![txtRebate2Paid]
        
        If Rebate < 0 Then
            ![txtRebate2UnderPaid] = -(Rebate)
            ![txtRebate2OverPaid] = 0
        Else
            ![txtRebate2UnderPaid] = 0
            ![txtRebate2OverPaid] = Rebate
        End If
    
    End If
    
Overalltotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Total Over/Under payment
    '_______________________________________________________________________________________
        
    Totalpayment = (![nTotalContributions]) - (![nNITotalPaid])
        
    If Totalpayment < 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = -(Totalpayment)
    Else
        ![nNITotalUnderpayment] = Totalpayment
        ![nNITotalOverpayment] = 0
    End If
    
    
validatetotals2:
    '_______________________________________________________________________________________
    
    ' This section validates the Total Over/Under payments
    '_______________________________________________________________________________________
        
    ' Total Conts U/P and O/P zero if EE has O/P and ER has U/P
    If (Employerspayment > 0) And (Employeespayment < 0) Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If

End With

Exit_calcDirectorsTotals:
    Exit Sub

Err_calcDirectorsTotals:
    MsgBox Error$
    Resume Exit_calcDirectorsTotals



End Sub

Sub calcDirectorsTotals01()
On Error GoTo Err_calcDirectorsTotals01
Dim Rebate As Currency
Dim Employerspayment As Currency
Dim Employeespayment As Currency
Dim Totalpayment As Currency
Dim OverallTotalPayment As Currency
Dim Diff As Currency

With Forms![frmDirectorsMain2001]
    'cater for user deleting these entires
    If IsNull(![nNITotalPaid]) Then
        ![nNITotalPaid] = 0
    End If
    If IsNull(![nEENITotalPaid]) Then
        ![nEENITotalPaid] = 0
    End If
    If IsNull(![nERNITotalPaid]) Then
        ![nERNITotalPaid] = 0
    End If
    
    If IsNull(![txtRebate1Paid]) Then
        ![txtRebate1Paid] = 0
    End If
    
    If IsNull(![txtRebate2Paid]) Then
        ![txtRebate2Paid] = 0
    End If
    
    
    !nTotalEEContributions = !DirectorsContributions.Form!EmployeeTotal
    !nTotalERContributions = !DirectorsContributions.Form!EmployerTotal
    
    If !cboTaxYear = 1999 Then
        !txtTotalRebate1 = !DirectorsContributions.Form!txtRebateTotal
    ElseIf !cboTaxYear > 1999 Then
        !txtTotalRebate1 = !DirectorsContributions.Form!txtRebate1Total
        !txtTotalRebate2 = !DirectorsContributions.Form!txtRebate2Total
    End If
    
    !nTotalContributions = !nTotalEEContributions + !nTotalERContributions
    
    CalculateERNIPaid01
    
    
    'EmployerTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employers Over/Under payment
    '_______________________________________________________________________________________
    
    Employerspayment = ![nTotalERContributions] - ![nERNITotalPaid]
    
    If Employerspayment < 0 Then
        ![nERNIUnderpayment] = 0
        ![nERNIOverpayment] = -(Employerspayment)
    Else
        ![nERNIUnderpayment] = Employerspayment
        ![nERNIOverpayment] = 0
    End If
    
        
    
    
    'EmployeeTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employees Over/Under payment
    '_______________________________________________________________________________________
    
    Employeespayment = ![nTotalEEContributions] - ![nEENITotalPaid]
    
    If Employeespayment < 0 Then
        ![nEENIUnderpayment] = 0
        ![nEENIOverpayment] = -(Employeespayment)
    Else
        ![nEENIUnderpayment] = Employeespayment
        ![nEENIOverpayment] = 0
    End If
    
    'EmployerRebate:
    '_______________________________________________________________________________________
    
    ' This section calculates the Rebate Over/Under payment
    '_______________________________________________________________________________________
    
    
    Rebate = ![txtTotalRebate1] - ![txtRebate1Paid]
    
    If Rebate < 0 Then
        ![txtRebate1UnderPaid] = -(Rebate)
        ![txtRebate1OverPaid] = 0
    Else
        ![txtRebate1UnderPaid] = 0
        ![txtRebate1OverPaid] = Rebate
    End If
    
    If !cboTaxYear > 1999 Then
    
        Rebate = ![txtTotalRebate2] - ![txtRebate2Paid]
        
        If Rebate < 0 Then
            ![txtRebate2UnderPaid] = -(Rebate)
            ![txtRebate2OverPaid] = 0
        Else
            ![txtRebate2UnderPaid] = 0
            ![txtRebate2OverPaid] = Rebate
        End If
    
    
    End If
    
    'Overalltotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Over/Under payment
    '_______________________________________________________________________________________
        
    Totalpayment = (![nTotalContributions]) - (![nEENITotalPaid] + ![nERNITotalPaid])
        
    If Totalpayment < 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = -(Totalpayment)
    Else
        ![nNITotalUnderpayment] = Totalpayment
        ![nNITotalOverpayment] = 0
    End If
    
    
    'validatetotals2:
    '_______________________________________________________________________________________
    
    ' This section validates the Over/Under payments
    '_______________________________________________________________________________________
        
    ' Total Conts U/P and O/P zero if EE has O/P and ER has U/P
    If (Employerspayment > 0) And (Employeespayment < 0) Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If
    
    
    '_______________________________________________________________________________________
    '
    ' This section calculates the EE Conts Column, Total Over/Under payment rows
    '_______________________________________________________________________________________
    
    Diff = ![nTotalEEContributions] - ![txtTotalRebate1] - ![nEENITotalPaid] + ![txtRebate1Paid]
    If Diff < 0 Then 'overpayment
        ![txtEEContTotalOverPayment] = -(Diff)
        ![txtEEContTotalUnderPayment] = 0
    Else
        ![txtEEContTotalOverPayment] = 0
        ![txtEEContTotalUnderPayment] = Diff
    End If
    
    
    '_______________________________________________________________________________________
    '
    ' This section calculates the ER Conts Column, Total Over/Under payment rows
    '_______________________________________________________________________________________
    
    Diff = ![nTotalERContributions] - ![txtTotalRebate2] - ![nERNITotalPaid] + ![txtRebate2Paid]
    If Diff < 0 Then 'overpayment
        ![txtERContTotalOverPayment] = -(Diff)
        ![txtERContTotalUnderPayment] = 0
    Else
        ![txtERContTotalOverPayment] = 0
        ![txtERContTotalUnderPayment] = Diff
    End If
    
    '_______________________________________________________________________________________
    '
    ' This section calculates the Total Conts Column, Total Over/Under payment rows
    '_______________________________________________________________________________________
    
    '![txtTotalContTotalUnderPayment] = ![txtEEContTotalUnderPayment] + ![txtERContTotalUnderPayment]
    '![txtTotalContTotalOverPayment] = ![txtEEContTotalOverPayment] + ![txtERContTotalOverPayment]
    OverallTotalPayment = (![nTotalContributions]) - (![nEENITotalPaid] + ![nERNITotalPaid]) - (![txtTotalRebate1] + ![txtTotalRebate2]) + (![txtRebate1Paid] + ![txtRebate2Paid])
    If OverallTotalPayment < 0 Then
        ![txtTotalContTotalUnderPayment] = 0
        ![txtTotalContTotalOverPayment] = -(OverallTotalPayment)
    Else
        ![txtTotalContTotalUnderPayment] = OverallTotalPayment
        ![txtTotalContTotalOverPayment] = 0
    End If
    
    
    
    'If there is an EE overpayment and an ER underpayment then there is no offset allowed of an EE
    'refund against an ER debt. In this case the totals are set to 0.
    'However, an EE underpayment can be offset against an ER overpayment
    
    If ![txtEEContTotalOverPayment] > 0 And ![txtERContTotalUnderPayment] > 0 Then
        ![txtTotalContTotalUnderPayment] = 0
        ![txtTotalContTotalOverPayment] = 0
    End If
End With

Exit_calcDirectorsTotals01:
    Exit Sub

Err_calcDirectorsTotals01:
    MsgBox Error$
    Resume Exit_calcDirectorsTotals01


End Sub
Sub calcDirectorsTotals03()
On Error GoTo Err_calcDirectorsTotals03
Dim Rebate As Currency
Dim Employerspayment As Currency
Dim Employeespayment As Currency
Dim Totalpayment As Currency
Dim OverallTotalPayment As Currency
Dim Diff As Currency

With Forms![frmDirectorsMain2003]
    'cater for user deleting these entires
    If IsNull(![nNITotalPaid]) Then
        ![nNITotalPaid] = 0
    End If
    If IsNull(![nEENITotalPaid]) Then
        ![nEENITotalPaid] = 0
    End If
    If IsNull(![nERNITotalPaid]) Then
        ![nERNITotalPaid] = 0
    End If
    
    
    !nTotalEEContributions = !DirectorsContributions.Form!EmployeeTotal
    !nTotalERContributions = !DirectorsContributions.Form!EmployerTotal
    
    
    
    !nTotalContributions = !nTotalEEContributions + !nTotalERContributions
    
    CalculateERNIPaid03
    
    
    'EmployerTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employers Over/Under payment
    '_______________________________________________________________________________________
    
    Employerspayment = ![nTotalERContributions] - ![nERNITotalPaid]
    
    If Employerspayment < 0 Then
        ![nERNIUnderpayment] = 0
        ![nERNIOverpayment] = -(Employerspayment)
    Else
        ![nERNIUnderpayment] = Employerspayment
        ![nERNIOverpayment] = 0
    End If
    
        
    
    
    'EmployeeTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employees Over/Under payment
    '_______________________________________________________________________________________
    
    Employeespayment = ![nTotalEEContributions] - ![nEENITotalPaid]
    
    If Employeespayment < 0 Then
        ![nEENIUnderpayment] = 0
        ![nEENIOverpayment] = -(Employeespayment)
    Else
        ![nEENIUnderpayment] = Employeespayment
        ![nEENIOverpayment] = 0
    End If
    
    'Overalltotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Over/Under payment
    '_______________________________________________________________________________________
        
    Totalpayment = (![nTotalContributions]) - (![nEENITotalPaid] + ![nERNITotalPaid])
        
    If Totalpayment < 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = -(Totalpayment)
    Else
        ![nNITotalUnderpayment] = Totalpayment
        ![nNITotalOverpayment] = 0
    End If
    
    
    'validatetotals2:
    '_______________________________________________________________________________________
    
    ' This section validates the Over/Under payments
    '_______________________________________________________________________________________
        
    ' Total Conts U/P and O/P zero if EE has O/P and ER has U/P
    If (Employerspayment > 0) And (Employeespayment < 0) Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If
    
    
    
    
    'If there is an EE overpayment and an ER underpayment then there is no offset allowed of an EE
    'refund against an ER debt. In this case the totals are set to 0.
    'However, an EE underpayment can be offset against an ER overpayment
    
    If ![nEENIOverpayment] > 0 And ![nERNIUnderpayment] > 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If

End With
Exit_calcDirectorsTotals03:
    Exit Sub

Err_calcDirectorsTotals03:
    MsgBox Error$
    Resume Exit_calcDirectorsTotals03


End Sub

Sub calcDirectorsTotals16()
On Error GoTo Err_calcDirectorsTotals16
Dim Rebate As Currency
Dim Employerspayment As Currency
Dim Employeespayment As Currency
Dim Totalpayment As Currency
Dim OverallTotalPayment As Currency
Dim Diff As Currency

With Forms![frmDirectorsMain2016]
    'cater for user deleting these entires
    If IsNull(![nNITotalPaid]) Then
        ![nNITotalPaid] = 0
    End If
    If IsNull(![nEENITotalPaid]) Then
        ![nEENITotalPaid] = 0
    End If
    If IsNull(![nERNITotalPaid]) Then
        ![nERNITotalPaid] = 0
    End If
    
    
    !nTotalEEContributions = !DirectorsContributions.Form!EmployeeTotal
    !nTotalERContributions = !DirectorsContributions.Form!EmployerTotal
    
    
    
    !nTotalContributions = !nTotalEEContributions + !nTotalERContributions
    
    CalculateERNIPaid16
    
    
    'EmployerTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employers Over/Under payment
    '_______________________________________________________________________________________
    
    Employerspayment = ![nTotalERContributions] - ![nERNITotalPaid]
    
    If Employerspayment < 0 Then
        ![nERNIUnderpayment] = 0
        ![nERNIOverpayment] = -(Employerspayment)
    Else
        ![nERNIUnderpayment] = Employerspayment
        ![nERNIOverpayment] = 0
    End If
    
        
    
    
    'EmployeeTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employees Over/Under payment
    '_______________________________________________________________________________________
    
    Employeespayment = ![nTotalEEContributions] - ![nEENITotalPaid]
    
    If Employeespayment < 0 Then
        ![nEENIUnderpayment] = 0
        ![nEENIOverpayment] = -(Employeespayment)
    Else
        ![nEENIUnderpayment] = Employeespayment
        ![nEENIOverpayment] = 0
    End If
    
    'Overalltotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Over/Under payment
    '_______________________________________________________________________________________
        
    Totalpayment = (![nTotalContributions]) - (![nEENITotalPaid] + ![nERNITotalPaid])
        
    If Totalpayment < 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = -(Totalpayment)
    Else
        ![nNITotalUnderpayment] = Totalpayment
        ![nNITotalOverpayment] = 0
    End If
    
    
    'validatetotals2:
    '_______________________________________________________________________________________
    
    ' This section validates the Over/Under payments
    '_______________________________________________________________________________________
        
    ' Total Conts U/P and O/P zero if EE has O/P and ER has U/P
    If (Employerspayment > 0) And (Employeespayment < 0) Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If
    
    
    
    
    'If there is an EE overpayment and an ER underpayment then there is no offset allowed of an EE
    'refund against an ER debt. In this case the totals are set to 0.
    'However, an EE underpayment can be offset against an ER overpayment
    
    If ![nEENIOverpayment] > 0 And ![nERNIUnderpayment] > 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If

End With
Exit_calcDirectorsTotals16:
    Exit Sub

Err_calcDirectorsTotals16:
    MsgBox Error$
    Resume Exit_calcDirectorsTotals16


End Sub

Sub calcDirectorsTotals09()
On Error GoTo Err_calcDirectorsTotals09
Dim Rebate As Currency
Dim Employerspayment As Currency
Dim Employeespayment As Currency
Dim Totalpayment As Currency
Dim OverallTotalPayment As Currency
Dim Diff As Currency

With Forms![frmDirectorsMain2009]
    'cater for user deleting these entires
    If IsNull(![nNITotalPaid]) Then
        ![nNITotalPaid] = 0
    End If
    If IsNull(![nEENITotalPaid]) Then
        ![nEENITotalPaid] = 0
    End If
    If IsNull(![nERNITotalPaid]) Then
        ![nERNITotalPaid] = 0
    End If
    
    
    !nTotalEEContributions = !DirectorsContributions.Form!EmployeeTotal
    !nTotalERContributions = !DirectorsContributions.Form!EmployerTotal
    
    
    
    !nTotalContributions = !nTotalEEContributions + !nTotalERContributions
    
    CalculateERNIPaid09
    
    
    'EmployerTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employers Over/Under payment
    '_______________________________________________________________________________________
    
    Employerspayment = ![nTotalERContributions] - ![nERNITotalPaid]
    
    If Employerspayment < 0 Then
        ![nERNIUnderpayment] = 0
        ![nERNIOverpayment] = -(Employerspayment)
    Else
        ![nERNIUnderpayment] = Employerspayment
        ![nERNIOverpayment] = 0
    End If
    
        
    
    
    'EmployeeTotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employees Over/Under payment
    '_______________________________________________________________________________________
    
    Employeespayment = ![nTotalEEContributions] - ![nEENITotalPaid]
    
    If Employeespayment < 0 Then
        ![nEENIUnderpayment] = 0
        ![nEENIOverpayment] = -(Employeespayment)
    Else
        ![nEENIUnderpayment] = Employeespayment
        ![nEENIOverpayment] = 0
    End If
    
    'Overalltotal2:
    '_______________________________________________________________________________________
    
    ' This section calculates the Over/Under payment
    '_______________________________________________________________________________________
        
    Totalpayment = (![nTotalContributions]) - (![nEENITotalPaid] + ![nERNITotalPaid])
        
    If Totalpayment < 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = -(Totalpayment)
    Else
        ![nNITotalUnderpayment] = Totalpayment
        ![nNITotalOverpayment] = 0
    End If
    
    
    'validatetotals2:
    '_______________________________________________________________________________________
    
    ' This section validates the Over/Under payments
    '_______________________________________________________________________________________
        
    ' Total Conts U/P and O/P zero if EE has O/P and ER has U/P
    If (Employerspayment > 0) And (Employeespayment < 0) Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If
    
    
    
    
    'If there is an EE overpayment and an ER underpayment then there is no offset allowed of an EE
    'refund against an ER debt. In this case the totals are set to 0.
    'However, an EE underpayment can be offset against an ER overpayment
    
    If ![nEENIOverpayment] > 0 And ![nERNIUnderpayment] > 0 Then
        ![nNITotalUnderpayment] = 0
        ![nNITotalOverpayment] = 0
    End If

End With
Exit_calcDirectorsTotals09:
    Exit Sub

Err_calcDirectorsTotals09:
    MsgBox Error$
    Resume Exit_calcDirectorsTotals09


End Sub

Sub CalculateERNIPaid()
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : CalculateERNIPaid
' Purpose       : From NITotalPaid and Employee NIPaid, deduce amount Employer paid

    Dim Total As Currency, EE As Currency, ER As Currency, NICRebate As Currency

    On Error GoTo Err_CalculateERNIPaid

    
    ' If Total and EE zero, so must ER
    If IsNull(Forms![frmDirectorsMain]![nNITotalPaid]) And IsNull(Forms![frmDirectorsMain]![nEENITotalPaid]) Then
        Forms![frmDirectorsMain]![nERNITotalPaid] = 0
        Exit Sub
    End If
    
    Total = IIf(IsNull(Forms![frmDirectorsMain]![nNITotalPaid]), 0, Forms![frmDirectorsMain]![nNITotalPaid])
    EE = IIf(IsNull(Forms![frmDirectorsMain]![nEENITotalPaid]), 0, Forms![frmDirectorsMain]![nEENITotalPaid])
   
    ' Employer must have paid this amount
    ER = Total - EE

    Forms![frmDirectorsMain]![nERNITotalPaid] = ER

Exit_CalculateERNIPaid:
    Exit Sub

Err_CalculateERNIPaid:
    MsgBox Error$
    Resume Exit_CalculateERNIPaid


End Sub

Sub CalculateERNIPaid01()
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : CalculateERNIPaid
' Purpose       : From NITotalPaid and Employee NIPaid, deduce amount Employer paid
' Author        : Peter Morton
' Date          : 05 Jan 2001
' Purpose       : Copied and amended for 2001


    Dim Total As Currency, EE As Currency, ER As Currency, NICRebate As Currency

    On Error GoTo Err_CalculateERNIPaid01

    
    ' If Total and EE zero, so must ER
    If IsNull(Forms![frmDirectorsMain2001]![nNITotalPaid]) And IsNull(Forms![frmDirectorsMain2001]![nEENITotalPaid]) Then
        Forms![frmDirectorsMain2001]![nERNITotalPaid] = 0
        Exit Sub
    End If
    
    Total = IIf(IsNull(Forms![frmDirectorsMain2001]![nNITotalPaid]), 0, Forms![frmDirectorsMain2001]![nNITotalPaid])
    EE = IIf(IsNull(Forms![frmDirectorsMain2001]![nEENITotalPaid]), 0, Forms![frmDirectorsMain2001]![nEENITotalPaid])
   
    ' Employer must have paid this amount
    ER = Total - EE

    Forms![frmDirectorsMain2001]![nERNITotalPaid] = ER

Exit_CalculateERNIPaid01:
    Exit Sub

Err_CalculateERNIPaid01:
    MsgBox Error$
    Resume Exit_CalculateERNIPaid01

End Sub
Sub CalculateERNIPaid03()
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : CalculateERNIPaid
' Purpose       : From NITotalPaid and Employee NIPaid, deduce amount Employer paid
' Author        : Peter Morton
' Date          : 05 Jan 2001
' Purpose       : Copied and amended for 2001
' Author        : Chris Schuler
' Date          : 24 Jan 2003
' Purpose       : Copied and amended for 2003

    Dim Total As Currency, EE As Currency, ER As Currency, NICRebate As Currency

    On Error GoTo Err_CalculateERNIPaid03

    
    ' If Total and EE zero, so must ER
    If IsNull(Forms![frmDirectorsMain2003]![nNITotalPaid]) And IsNull(Forms![frmDirectorsMain2003]![nEENITotalPaid]) Then
        Forms![frmDirectorsMain2003]![nERNITotalPaid] = 0
        Exit Sub
    End If
    
    Total = IIf(IsNull(Forms![frmDirectorsMain2003]![nNITotalPaid]), 0, Forms![frmDirectorsMain2003]![nNITotalPaid])
    EE = IIf(IsNull(Forms![frmDirectorsMain2003]![nEENITotalPaid]), 0, Forms![frmDirectorsMain2003]![nEENITotalPaid])
   
    ' Employer must have paid this amount
    ER = Total - EE

    Forms![frmDirectorsMain2003]![nERNITotalPaid] = ER

Exit_CalculateERNIPaid03:
    Exit Sub

Err_CalculateERNIPaid03:
    MsgBox Error$
    Resume Exit_CalculateERNIPaid03

End Sub

Sub CalculateERNIPaid16()
' Author        : Christopher Sneddon
' Date          : 18 November 2015
' Fuction Name  : CalculateERNIPaid
' Purpose       : From NITotalPaid and Employee NIPaid, deduce amount Employer paid


    Dim Total As Currency, EE As Currency, ER As Currency, NICRebate As Currency

    On Error GoTo Err_CalculateERNIPaid16

    
    ' If Total and EE zero, so must ER
    If IsNull(Forms![frmDirectorsMain2016]![nNITotalPaid]) And IsNull(Forms![frmDirectorsMain2016]![nEENITotalPaid]) Then
        Forms![frmDirectorsMain2016]![nERNITotalPaid] = 0
        Exit Sub
    End If
    
    Total = IIf(IsNull(Forms![frmDirectorsMain2016]![nNITotalPaid]), 0, Forms![frmDirectorsMain2016]![nNITotalPaid])
    EE = IIf(IsNull(Forms![frmDirectorsMain2016]![nEENITotalPaid]), 0, Forms![frmDirectorsMain2016]![nEENITotalPaid])
   
    ' Employer must have paid this amount
    ER = Total - EE

    Forms![frmDirectorsMain2016]![nERNITotalPaid] = ER

Exit_CalculateERNIPaid16:
    Exit Sub

Err_CalculateERNIPaid16:
    MsgBox Error$
    Resume Exit_CalculateERNIPaid16

End Sub

Sub CalculateERNIPaid09()
' Author        : Christopher Sneddon
' Date          : 09 February 2009
' Fuction Name  : CalculateERNIPaid
' Purpose       : From NITotalPaid and Employee NIPaid, deduce amount Employer paid


    Dim Total As Currency, EE As Currency, ER As Currency, NICRebate As Currency

    On Error GoTo Err_CalculateERNIPaid09

    
    ' If Total and EE zero, so must ER
    If IsNull(Forms![frmDirectorsMain2009]![nNITotalPaid]) And IsNull(Forms![frmDirectorsMain2009]![nEENITotalPaid]) Then
        Forms![frmDirectorsMain2009]![nERNITotalPaid] = 0
        Exit Sub
    End If
    
    Total = IIf(IsNull(Forms![frmDirectorsMain2009]![nNITotalPaid]), 0, Forms![frmDirectorsMain2009]![nNITotalPaid])
    EE = IIf(IsNull(Forms![frmDirectorsMain2009]![nEENITotalPaid]), 0, Forms![frmDirectorsMain2009]![nEENITotalPaid])
   
    ' Employer must have paid this amount
    ER = Total - EE

    Forms![frmDirectorsMain2009]![nERNITotalPaid] = ER

Exit_CalculateERNIPaid09:
    Exit Sub

Err_CalculateERNIPaid09:
    MsgBox Error$
    Resume Exit_CalculateERNIPaid09

End Sub

Sub CalculatePre1999()
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : CalculatePre1999
' Purpose       : Carry out the processing required to calculate the contibutions, post and payments made
' History Date  : 07 June 1995
'               : Replaced calls to post summary with calls to contributions summary
'               : Change order of process EBDAC or DEADC
'               : Insert missing SCategory="E" condition in LEL
'               : Amend so that start of Directorship entered, and number of pro-rata weeks calculated
'               : Cat C modifications, Banding calculated using all bands
' History Date  : 10 October 1995
'               : [C/O NI] should be Employee contributions for D or E, nCurContri6
' Author        : Mustaq Hussain
' Date          : 23 January 1997
' Purpose       : RFC 515H : Hourglass
' Author        : Lisa Scothern
' Date          : 20 May 1997
' Purpose       : RFC 642C : Add categories F, G, & S to the calculation
' Author        : Lisa Scothern
' Date          : 21 May 1997
' Purpose       : RFC 642C : Added checks for invalid tax year & category combinations (which may be caused
'               : by user not clearing down calc b4 selecting a new tax year & re-pressing 'Calculate').
' Author        : Lisa Scothern
' Date          : 24 September 1997
' Purpose       : RFC 541J : Replaced calls to nRoundTo with global curRound(). [nRoundTo() has been removed
'               : from modDirectors]




    Dim myDB As Database, mySet As DAO.Recordset
    Dim SQLQuery As String
    
    ' nYear            : Tax Year
    ' bAPP             : APP option, true/false
    ' bAnnualEarnings  : Earnings period annual(true)/weekly(false)
    ' nNumberOfWeeks   : Number of pro-rata weeks
    Dim nYear As Integer, bAPP  As Integer, bAnnualEarnings As Integer, nNumberOfWeeks As Integer


    ' nBand         : Band total earnings falls into
    ' nBandPlusC    : Band (possible different from nBand) when Cat C taken into account
    Dim nBand As Integer ', nBandPlusC As Integer

    
    ' txtLEL/UEL  : LEL and UEL of specified tax year
    Dim txtLEL As Currency, txtUEL As Currency
        
    ' PercentageEE/ER : Percentage rates used to calculate contributions
    Dim PercentageEE As Double, PercentageER As Double

    ' sCategory     : Current record's category
    ' sGatheringCat : gathering categories order
    Dim sCategory  As String, sGatheringCat As String
    

    ' nNotContrContriX  : Total Contributions for not contracted contracts
    ' nContrContriX     : Total Contributions for contracted contracts
    Dim nNotContrContri1 As Currency, nNotContrContri2 As Currency, nNotContrContri3 As Currency, nNotContrContri4 As Currency, nNotContrContri5 As Currency
    Dim nContrContri1 As Currency, nContrContri2 As Currency, nContrContri3 As Currency, nContrContri4 As Currency, nContrContri5 As Currency
    
    ' nTotalContriX : Total Contributions (contracted & not contracted )
    Dim nTotalContri1 As Currency, nTotalContri2 As Currency, nTotalContri3 As Currency, nTotalContri4 As Currency, nTotalContri5 As Currency
    
    ' nCurContriX   : Contributions for current record
    Dim nCurContri1 As Currency, nCurContri2 As Currency, nCurContri3 As Currency, nCurContri4 As Currency, nCurContri5 As Currency, nCurContri6 As Currency

    ' nTotalGross         : Total Gross over the period (A+B+C+D+E)
    Dim nTotalGross As Currency
    
    ' nCurEarnings  : Earnings for a current record entry/row
    Dim nCurEarnings As Currency
    
    ' NIAble    : Part of Earnings (from current record) which is still eledgeble for NI contributions
    Dim NIAble As Currency

    ' nGrossContractedOut       : Total Gross Pay on contracted out work (D & E)
    ' nGrossNotContractedOut    : Total Gross Pay on not contracted out work (A, B & C)
    Dim nGrossContractedOut As Currency
    Dim nGrossNotContractedOut As Currency

    ' bLEL/UEL_Reached  : Limits attained
    Dim bLEL_Reached As Integer, bUEL_Reached As Integer


    ' previous  : Amount of LEL/UEL that has been used by the previous details
    ' amount    : Amount of the Gross making some contribution
    Dim previous As Currency, Amount As Currency
    

    ' nContrEEEarnings      : Employee Earnings for contracted out contracts (Gross portion used to get up to UEL)
    ' nNotContrEEEarnings   : Employee Earnings for not contracted out contracts (Gross portion used to get up to UEL)
    Dim nContrEEEarnings As Currency, nContrEEEarningsAboveLEL As Currency
    Dim nNotContrEEEarnings As Currency
    
    ' nPrevContrEEEarnings          : Employee Earnings for previous contracted out contracts (Gross portion used to get up to UEL)
    ' nPrevNotContrEEEarnings       : Employee Earnings for previous not contracted out contracts (Gross portion used to get up to UEL)
    ' nPrevContrEEEarningsAboveLEL  : Employee Earnings above LEL for previous not contracted out contracts
    Dim nPrevContrEEEarnings As Currency
    Dim nPrevNotContrEEEarnings As Currency
    Dim nPrevContrEEEarningsAboveLEL As Currency

    ' sCatOrder : Order in which details used in contributions, determined by category
    ' nPosition : Position in category order string
    ' Criterion : Condition used to limit the search to specified category
    Dim sCatOrder As String, nposition As Integer, Criterion As String
    

    On Error GoTo Err_cmdCalculate_Enter

    DoCmd.Hourglass True

    If TaxYearCatCombinationInvalid() Then
        GoTo Exit_cmdCalculate_Enter    ' User had not cleared b4 changing Tax Year (& not changing category)
    End If

    nTotalGross = 0

    nGrossNotContractedOut = 0
    nGrossContractedOut = 0
    nContrEEEarnings = 0
    nNotContrEEEarnings = 0
    nContrEEEarningsAboveLEL = 0
    
    ' Check to see if Tax, App and Period set
    If bSettingsCorrect() = False Then
        Exit Sub
    End If

    Set myDB = DBEngine.Workspaces(0).Databases(0)
    Set mySet = myDB.OpenRecordset("SELECT * FROM [DIRECTORS CONTRIBUTIONS TABLE]")


    ' Ensure records details entered
    If mySet.Recordcount = 0 Then
        Beep
        MsgBox ("No Contributions have been entered")
        DoCmd.Hourglass False
        Exit Sub
    End If
    
    
    ' Tax Yr
    nYear = Forms![frmDirectorsMain]![cboTaxYear]
    
    ' APP option
    bAPP = Forms![frmDirectorsMain].[optAPP]

    ' Earnings period
    bAnnualEarnings = Forms![frmDirectorsMain]![optEarningsPeriod]

    ' Number of pro-rata weeks
    nNumberOfWeeks = nGetNumberOfProRataWeeks(Forms![frmDirectorsMain])


    ' Total Gross
    GetTotalGrossPayed mySet, nTotalGross


    ' Band, LEL and UEL
    Banding bAnnualEarnings, nYear, nNumberOfWeeks, nTotalGross, nBand, txtLEL, txtUEL


    ' Set the forms LEL/UEL
    Forms![frmDirectorsMain].[txtLELorETorER_ET] = txtLEL
    Forms![frmDirectorsMain].[txtUEL] = txtUEL
    
    ' Check that LEL reached
    If nTotalGross < txtLEL Then
        Beep
        MsgBox ("Gross Pay does not reach LEL")
        ClearContributionsSummary
        ClearPayments
        DoCmd.Hourglass False
        Exit Sub
    End If


    nTotalContri1 = 0
    nTotalContri2 = 0
    nTotalContri3 = 0
    nTotalContri4 = 0
    nTotalContri5 = 0
    nNotContrContri1 = 0
    nNotContrContri2 = 0
    nNotContrContri3 = 0
    nNotContrContri4 = 0
    nNotContrContri5 = 0
    nCurContri1 = 0
    nCurContri2 = 0
    nCurContri3 = 0
    nCurContri4 = 0
    nCurContri5 = 0
    nCurContri6 = 0
    nPrevNotContrEEEarnings = 0
    nPrevContrEEEarnings = 0
    nPrevContrEEEarningsAboveLEL = 0
    nCurEarnings = 0

    bLEL_Reached = False
    bUEL_Reached = False
    previous = 0

    
    If bAPP = cNoAPP Then
        sCatOrder = "GEBFDASC"
    Else
        sCatOrder = "BGEAFDSC"
    End If
        
    ' Clear contributions summary, for new contributions
    ClearContributionsSummary


    ' Loop around each category, in order specified
    For nposition = 1 To 8
    
        sGatheringCat = Mid$(sCatOrder, nposition, 1)
        Criterion = "Category = '" + sGatheringCat + "'"
        mySet.FindFirst Criterion
    
        ' Loop around selected category
        Do Until mySet.NoMatch
    
            mySet.Edit
            ZeroContributionsRecord mySet
            
            PercentageEE = 0
            PercentageER = 0
        
            sCategory = mySet![Category]
            nCurEarnings = mySet![Gross Pay]
    
    
            NIAble = nCurEarnings
        
    
        
            '------------------------EMPLOYEE & EMPLOYER CONTRIBUTIONS---------------------
            '------------------------------------------------------------------------------
        
    
    
            ' -------------------------------  LEL Start ------------------------------
            ' -------------------------------------------------------------------------
            UseClass_1_Rate nYear, sCategory, cLELEmployee, nBand, PercentageEE
            UseClass_1_Rate nYear, sCategory, cLELEmployer, nBand, PercentageER
    
            
            If bLEL_Reached = False And nTotalContri1 + nTotalContri3 > 0 Then
                ' LEL not reached yet
                ' 0        LEL
                ' XXXX000000
    
                Amount = IIf((txtLEL - previous) - nCurEarnings > 0, nCurEarnings, txtLEL - previous)
                
                If sCategory = "D" Or sCategory = "E" Or sCategory = "F" Or sCategory = "G" Or sCategory = "S" Then
                    nContrEEEarnings = nContrEEEarnings + Amount
                End If
                If sCategory = "A" Or sCategory = "B" Or sCategory = "C" Then
                    nNotContrEEEarnings = nNotContrEEEarnings + Amount
                End If
                
                nTotalContri1 = curRound(nTotalContri1 + Amount * PercentageEE)
                nTotalContri3 = curRound(nTotalContri3 + Amount * PercentageER)
                nCurContri1 = curRound(Amount * PercentageEE)
                nCurContri3 = curRound(Amount * PercentageER)
    
                UpdateLELContrubutionsRecord mySet, PercentageEE, nCurContri1, PercentageER, nCurContri3, Amount
            
                If (txtLEL - previous) - nCurEarnings > 0 Then
                    ' LEL still not reached
                    ' 0        LEL      0        LEL
                    ' XXXXZZZ000   ->   XXXXXXX000
                    bLEL_Reached = False
                    previous = previous + nCurEarnings
                    GoTo bottom:
                Else
                    ' LEL now reached
                    ' 0        LEL      0        LEL
                    ' XXXXZZZZZZ   ->   XXXXXXXXXX
                    bLEL_Reached = True
                    previous = 0
                    NIAble = nCurEarnings - Amount
                End If
            
            Else
                ' LEL reached or first time through
                
                If nTotalContri1 + nTotalContri3 = 0 Then
                    ' First time through
            
                    Amount = IIf(txtLEL - nCurEarnings > 0, nCurEarnings, txtLEL)
                    
                    If sCategory = "D" Or sCategory = "E" Or sCategory = "F" Or sCategory = "G" Or sCategory = "S" Then
                        nContrEEEarnings = nContrEEEarnings + Amount
                    End If
                    If sCategory = "A" Or sCategory = "B" Or sCategory = "C" Then
                        nNotContrEEEarnings = nNotContrEEEarnings + Amount
                    End If
                    
                    
                    nTotalContri1 = curRound(Amount * PercentageEE)
                    nTotalContri3 = curRound(Amount * PercentageER)
                    nCurContri1 = curRound(Amount * PercentageEE)
                    nCurContri3 = curRound(Amount * PercentageER)
    
                    UpdateLELContrubutionsRecord mySet, PercentageEE, nCurContri1, PercentageER, nCurContri3, Amount
    
                    If txtLEL - nCurEarnings > 0 Then
                        ' NOT beyond LEL
                        ' 0      LEL
                        ' XXXX0000
                        bLEL_Reached = False
                        previous = nCurEarnings
                        GoTo bottom:
                    Else
                        ' Beyond LEL
                        ' 0      LEL
                        ' XXXXXXXX
                        bLEL_Reached = True
                        NIAble = nCurEarnings - txtLEL
                    End If
                End If 'FTT
            End If
            ' ------------------------------------------------------------------------
            ' ------------------------------- LEL Finished ---------------------------
    
                
            ' ------------------------------ UEL Start --------------------------------
            ' -------------------------------------------------------------------------
            ' Up to UEL contributions
            UseClass_1_Rate nYear, sCategory, cUELEmployee, nBand, PercentageEE
            UseClass_1_Rate nYear, sCategory, cUELEmployer, nBand, PercentageER
            
            
            If bUEL_Reached = False And nTotalContri2 + nTotalContri4 > 0 Then
                ' UEL not reached yet
                ' LEL       UEL
                '  XXXX000000
    
                Amount = IIf((txtUEL - previous) - NIAble > 0, NIAble, txtUEL - previous)
    
                If sCategory = "D" Or sCategory = "E" Or sCategory = "F" Or sCategory = "G" Or sCategory = "S" Then
                    nContrEEEarnings = nContrEEEarnings + Amount
                    nContrEEEarningsAboveLEL = nContrEEEarningsAboveLEL + Amount
                End If
                If sCategory = "A" Or sCategory = "B" Or sCategory = "C" Then
                    nNotContrEEEarnings = nNotContrEEEarnings + Amount
                End If
                
                nTotalContri2 = curRound(nTotalContri2 + Amount * PercentageEE)
                nTotalContri4 = curRound(nTotalContri4 + Amount * PercentageER)
                nCurContri2 = curRound(Amount * PercentageEE)
                nCurContri4 = curRound(Amount * PercentageER)
                ' C/O NI
                If sCategory = "D" Or sCategory = "E" Or sCategory = "F" Or sCategory = "G" Or sCategory = "S" Then
                    nCurContri6 = nCurContri2
                End If
                
                UpdateUELContrubutionsRecord mySet, PercentageEE, nCurContri2, PercentageER, nCurContri4, Amount
    
                If (txtUEL - previous) - NIAble > 0 Then
                    ' UEL still not reached
                    ' LEL       UEL     LEL       UEL
                    '  XXXXZZZ000   ->   XXXXXXX000
                    bUEL_Reached = False
                    previous = previous + NIAble
                    GoTo bottom:
                Else
                    ' UEL now reached
                    ' LEL       UEL     LEL       UEL
                    '  XXXXZZZZZZ   ->   XXXXXXXXXX
                    bUEL_Reached = True
                    previous = 0
                    NIAble = NIAble - Amount
                End If
            Else
                ' UEL reached or first time through
                
                If nTotalContri2 + nTotalContri4 = 0 Then
                    ' First time through
            
                    Amount = IIf((txtUEL - txtLEL) - NIAble > 0, NIAble, (txtUEL - txtLEL))
    
                    If sCategory = "D" Or sCategory = "E" Or sCategory = "F" Or sCategory = "G" Or sCategory = "S" Then
                        nContrEEEarnings = nContrEEEarnings + Amount
                        nContrEEEarningsAboveLEL = nContrEEEarningsAboveLEL + Amount
                    End If
                    If sCategory = "A" Or sCategory = "B" Or sCategory = "C" Then
                        nNotContrEEEarnings = nNotContrEEEarnings + Amount
                    End If
                    
                    nTotalContri2 = curRound(Amount * PercentageEE)
                    nTotalContri4 = curRound(Amount * PercentageER)
                    nCurContri2 = curRound(Amount * PercentageEE)
                    nCurContri4 = curRound(Amount * PercentageER)
                    ' C/O NI
                    If sCategory = "D" Or sCategory = "E" Or sCategory = "F" Or sCategory = "G" Or sCategory = "S" Then
                        nCurContri6 = nCurContri2
                    End If
    
                    UpdateUELContrubutionsRecord mySet, PercentageEE, nTotalContri2, PercentageER, nTotalContri4, Amount
    
                    If (txtUEL - txtLEL) - NIAble > 0 Then
                        ' NOT beyond UEL
                        ' LEL     UEL
                        '  XXXX0000
                        bUEL_Reached = False
                        previous = txtLEL + NIAble
                        GoTo bottom:
                    Else
                        ' Beyond UEL
                        ' LEL     UEL
                        '  XXXXXXXX
                        bUEL_Reached = True
                        NIAble = NIAble - (txtUEL - txtLEL)
                    End If
                End If 'FTT
            
            End If
            ' ------------------------------------------------------------------------
            ' ------------------------------ UEL Finished ----------------------------
                        
            
            ' ------------------------------ Employer Above UEL start --------------------
            ' ----------------------------------------------------------------------------
            If bUEL_Reached = True Then
                UseClass_1_Rate nYear, sCategory, cAboveUEL, nBand, PercentageER
                Amount = NIAble
                If Amount > 0 Then
    
                    nTotalContri5 = curRound(nTotalContri5 + Amount * PercentageER)
                    nCurContri5 = curRound(Amount * PercentageER)

                    UpdateAboveUELContrubutionsRecord mySet, PercentageER, nCurContri5, Amount
    
                End If
            End If
            ' -----------------------------------------------------------------------------
            ' ------------------------------ Employer Above UEL Finished --------------------
            
    
            ' -----------------------------------------------------------------------------
            ' -------------------------EMPLOYER CONTRIBUTIONS COMPLETE---------------------
    
    
bottom:
    
    
            ' Update the record in the table to show its contributions
            UpdateIndividualRecord mySet, sGatheringCat, nNotContrEEEarnings - nPrevNotContrEEEarnings, nContrEEEarnings - nPrevContrEEEarnings, nContrEEEarningsAboveLEL - nPrevContrEEEarningsAboveLEL, nCurContri1, nCurContri2, nCurContri3, nCurContri4, nCurContri5, nCurContri6
    
            ' Accumulate contributions for final post analayis
            If sGatheringCat = "A" Or sGatheringCat = "B" Or sGatheringCat = "C" Then
                nGrossNotContractedOut = nGrossNotContractedOut + nCurEarnings
                nNotContrContri1 = nNotContrContri1 + nCurContri1
                nNotContrContri2 = nNotContrContri2 + nCurContri2
                nNotContrContri3 = nNotContrContri3 + nCurContri3
                nNotContrContri4 = nNotContrContri4 + nCurContri4
                nNotContrContri5 = nNotContrContri5 + nCurContri5
            Else
                nGrossContractedOut = nGrossContractedOut + nCurEarnings
                nContrContri1 = nContrContri1 + nCurContri1
                nContrContri2 = nContrContri2 + nCurContri2
                nContrContri3 = nContrContri3 + nCurContri3
                nContrContri4 = nContrContri4 + nCurContri4
                nContrContri5 = nContrContri5 + nCurContri5
            End If
            ' Reset local record contributions
            nCurContri1 = 0
            nCurContri2 = 0
            nCurContri3 = 0
            nCurContri4 = 0
            nCurContri5 = 0
            nCurContri6 = 0
            nPrevNotContrEEEarnings = nNotContrEEEarnings
            nPrevContrEEEarnings = nContrEEEarnings
            nPrevContrEEEarningsAboveLEL = nContrEEEarningsAboveLEL
    
            mySet.Update
            mySet.FindNext Criterion
    
        Loop
    
    Next

    
    mySet.Close
    



    ' Total contributions summary
    ShowTotalContributions nContrContri1 + nNotContrContri1, nContrContri2 + nNotContrContri2, nContrContri3 + nNotContrContri3, nContrContri4 + nNotContrContri4, nContrContri5 + nNotContrContri5

    ' Payments made, if any
    UpdatePaymentsMade
    

    ' Ensure all fields updated
    Forms!frmDirectorsMain.Recalc

Exit_cmdCalculate_Enter:
    DoCmd.Hourglass False
    Exit Sub

Err_cmdCalculate_Enter:
    MsgBox Error$
    Resume Exit_cmdCalculate_Enter

End Sub

Sub ClearContributionsSummary()
' Author        : Mustaq Hussain
' Date          : 07 June 1995
' Fuction Name  : ClearContributionsSummary
' Purpose       : Clear the contributions summary
    
    On Error GoTo Err_ClearContributionsSummary
    
    ' Clear summary fields
    Forms![frmDirectorsMain]![nTotalContributions].value = Null
    Forms![frmDirectorsMain]![nTotalEEContributions].value = Null
    Forms![frmDirectorsMain]![nTotalERContributions].value = Null
    Forms![frmDirectorsMain]![txtTotalRebate1].value = Null
    Forms![frmDirectorsMain]![txtTotalRebate2].value = Null

Exit_ClearContributionsSummary:
    Exit Sub

Err_ClearContributionsSummary:
    MsgBox Error$
    Resume Exit_ClearContributionsSummary

End Sub

Sub ClearForm()
' Author        : Mustaq Hussain
' Date          : 08 June 1995
' Fuction Name  : ClearForm
' Purpose       : Clear the Director's entry form, ready for new data
' History
' Author        : Mustaq Hussain
' Date          : 23 January
' Purpose       : RFC 515 : Clear ref field and set default tax year
'Author         : Christopher Schuler
'Date           : 12 August 1999
'Purpose        : Allow for additional subform from 1999
'Author         : Christopher Schuler
'Date           : 12 November 1999
'Purpose        : Allow for additional subform from 2000
            

    On Error GoTo Err_ClearForm
    
    DoCmd.SetWarnings False
    
    DoCmd.Hourglass True
    
'Runs the required SQL to delete all of the data input on the subform
Select Case Forms!frmDirectorsMain!cboTaxYear

    Case Is < 1999

        DoCmd.RunSQL "DELETE * FROM [DIRECTORS CONTRIBUTIONS TABLE]"

    Case 1999
     
        DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS]"

    Case 2000

        DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS2000]"
    
    Case Is > 2008
        
        DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS09]"
        
    Case Else
     
        DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS01]"

End Select
    
    Forms![frmDirectorsMain]![DirectorsContributions].Form.Requery

    'Re-initialises all of the input fields and set focus back to first input field
    
    ' Clear information only fields
    With Forms![frmDirectorsMain]
        !Surname = ""
        !Initial = ""
        !NIPrefix = ""
        !NInumber = ""
        !NIsuffix = ""
        !Ref = ""
        
        ' Clear LEL/UEL
        ![txtLEL] = Null
        ![txtLELorEE_ET] = Null
        ![txtLELorETorER_ET] = Null
        ![txtUEL] = Null
    End With
    ' Clear contributions summary details
    ClearContributionsSummary

    ' Clear all payments details
    ClearPayments

    ' Set to defaults
    Forms!frmDirectorsMain.optAPP = cNoAPP
    Forms![frmDirectorsMain].optEarningsPeriod = cAnnualEarnings
    SetDefaultDates

    ' Set focus
    Forms!frmDirectorsMain.Surname.SetFocus

    FirstLine = True
    
Exit_ClearForm:
    DoCmd.Hourglass False
    Exit Sub
    
Err_ClearForm:
    MsgBox Error$
    Resume Exit_ClearForm



End Sub

Sub Clearform01()
' Author        : Peter Morton
' Date          : 04 Jan 2001
' Fuction Name  : ClearForm
' Purpose       : Clear the Director's 2001 entry form, ready for new data
'Author     Chris Schuler
'Date       6 October 2004
'Purpose    CCA8292 - Make year 2000 form the same as 2001 and 2002
    
    On Error GoTo Err_ClearForm01
    
    DoCmd.SetWarnings False
    
    DoCmd.Hourglass True
    
'Run SQL to delete all of the data input on the subform
     
    DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS01]"
    DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS2000]"
    
    Forms![frmDirectorsMain2001]![DirectorsContributions].Form.Requery

    'Re-initialises all of the input fields and set focus back to first input field
    With Forms![frmDirectorsMain2001]
    ' Clear information only fields
        !Surname = ""
        !Initial = ""
        !NIPrefix = ""
        !NInumber = ""
        !NIsuffix = ""
        !Ref = ""
        
        ' Clear LEL/UEL
        ![txtLEL] = Null
        ![txtLELorEE_ET] = Null
        ![txtLELorETorER_ET] = Null
        ![txtUEL] = Null
    
        ' Clear contributions summary details
        ![nTotalContributions].value = Null
        ![nTotalEEContributions].value = Null
        ![nTotalERContributions].value = Null
        ![txtTotalRebate1].value = Null
        ![txtTotalRebate2].value = Null
        
    
        ' Clear all payments details
        !nNITotalPaid = Null
        !nEENITotalPaid = Null
        !nERNITotalPaid = Null
        !txtRebate1Paid = Null
        !txtRebate2Paid = Null
        !nNITotalUnderpayment = Null
        !nNITotalOverpayment = Null
        !nEENIUnderpayment = Null
        !nEENIOverpayment = Null
        !nERNIUnderpayment = Null
        !nERNIOverpayment = Null
        !txtRebate1UnderPaid = Null
        !txtRebate1OverPaid = Null
        !txtRebate2UnderPaid = Null
        !txtRebate2OverPaid = Null
        'pmor
        !txtTotalContTotalUnderPayment = Null
        !txtEEContTotalUnderPayment = Null
        !txtERContTotalUnderPayment = Null
        !txtTotalContTotalOverPayment = Null
        !txtEEContTotalOverPayment = Null
        !txtERContTotalOverPayment = Null
    
    
    
        ' Set to defaults
        !optAPP = cNoAPP
        !optEarningsPeriod = cAnnualEarnings
        SetDefaultDates01
    
        ' Set focus
        !Surname.SetFocus
    End With
    FirstLine = True
    
Exit_ClearForm01:
    DoCmd.Hourglass False
    Exit Sub
    
Err_ClearForm01:
    
    MsgBox Error$
    
    Resume Exit_ClearForm01



End Sub
Sub Clearform03()
' Author        : Chris Schuler
' Date          : 24 Jan 2003
' Fuction Name  : ClearForm
' Purpose       : Clear the Director's 2003 entry form, ready for new data

    On Error GoTo Err_ClearForm03
    
    DoCmd.SetWarnings False
    
    DoCmd.Hourglass True
    
'Run SQL to delete all of the data input on the subform
     
    DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS01]"
    With Forms![frmDirectorsMain2003]
        ![DirectorsContributions].Form.Requery
    
        'Re-initialises all of the input fields and set focus back to first input field
        
        ' Clear information only fields
        !Surname = ""
        !Initial = ""
        !NIPrefix = ""
        !NInumber = ""
        !NIsuffix = ""
        !Ref = ""
        
        ' Clear LEL/UEL
        ![txtLEL] = Null
        ![txtLELorEE_ET] = Null
        ![txtLELorETorER_ET] = Null
        ![txtUEL] = Null
    
        ' Clear contributions summary details
        ![nTotalContributions].value = Null
        ![nTotalEEContributions].value = Null
        ![nTotalERContributions].value = Null
        
    
        ' Clear all payments details
        !nNITotalPaid = Null
        !nEENITotalPaid = Null
        !nERNITotalPaid = Null
        !nNITotalUnderpayment = Null
        !nNITotalOverpayment = Null
        !nEENIUnderpayment = Null
        !nEENIOverpayment = Null
        !nERNIUnderpayment = Null
        !nERNIOverpayment = Null
    
    
    
        ' Set to defaults
        !optAPP = cNoAPP
        !optEarningsPeriod = cAnnualEarnings
        SetDefaultDates03
    
        ' Set focus
        !Surname.SetFocus
    End With
    
    
Exit_ClearForm03:
    DoCmd.Hourglass False
    Exit Sub
    
Err_ClearForm03:
    
    MsgBox Error$
    
    Resume Exit_ClearForm03



End Sub
Sub Clearform16()
' Author        : Christpfahfah Sneddon
' Date          : 18/11/2015
' Fuction Name  : ClearForm
' Purpose       : Clear the Director's 2016 entry form, ready for new data

    On Error GoTo Err_ClearForm16
    
    DoCmd.SetWarnings False
    
    DoCmd.Hourglass True
    
'Run SQL to delete all of the data input on the subform
     
    DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS16]"
    With Forms![frmDirectorsMain2016]
        ![DirectorsContributions].Form.Requery
    
        'Re-initialises all of the input fields and set focus back to first input field
        
        ' Clear information only fields
        !Surname = ""
        !Initial = ""
        !NIPrefix = ""
        !NInumber = ""
        !NIsuffix = ""
        !Ref = ""
        
        ' Clear LEL/UEL
        ![txtLEL] = Null
        ![txtEE_ET] = Null
        ![txtER_ET] = Null
        ![txtUEL] = Null
    
        ' Clear contributions summary details
        ![nTotalContributions].value = Null
        ![nTotalEEContributions].value = Null
        ![nTotalERContributions].value = Null
        
    
        ' Clear all payments details
        !nNITotalPaid = Null
        !nEENITotalPaid = Null
        !nERNITotalPaid = Null
        !nNITotalUnderpayment = Null
        !nNITotalOverpayment = Null
        !nEENIUnderpayment = Null
        !nEENIOverpayment = Null
        !nERNIUnderpayment = Null
        !nERNIOverpayment = Null
    
    
    
        ' Set to defaults
        !optAPP = cNoAPP
        !optEarningsPeriod = cAnnualEarnings
        SetDefaultDates16
    
        ' Set focus
        !Surname.SetFocus
    End With
    
    
Exit_ClearForm16:
    DoCmd.Hourglass False
    Exit Sub
    
Err_ClearForm16:
    
    MsgBox Error$
    
    Resume Exit_ClearForm16

End Sub


Sub Clearform09()
' Author        : Christpfahfah Sneddon
' Date          : 09 February 2009
' Fuction Name  : ClearForm
' Purpose       : Clear the Director's 2009 entry form, ready for new data

    On Error GoTo Err_ClearForm09
    
    DoCmd.SetWarnings False
    
    DoCmd.Hourglass True
    
'Run SQL to delete all of the data input on the subform
     
    DoCmd.RunSQL "DELETE * FROM [tblDIRECTORSCONTRIBUTIONS09]"
    With Forms![frmDirectorsMain2009]
        ![DirectorsContributions].Form.Requery
    
        'Re-initialises all of the input fields and set focus back to first input field
        
        ' Clear information only fields
        !Surname = ""
        !Initial = ""
        !NIPrefix = ""
        !NInumber = ""
        !NIsuffix = ""
        !Ref = ""
        
        ' Clear LEL/UEL
        ![txtLEL] = Null
        ![txtEE_ET] = Null
        ![txtER_ET] = Null
        ![txtUEL] = Null
    
        ' Clear contributions summary details
        ![nTotalContributions].value = Null
        ![nTotalEEContributions].value = Null
        ![nTotalERContributions].value = Null
        
    
        ' Clear all payments details
        !nNITotalPaid = Null
        !nEENITotalPaid = Null
        !nERNITotalPaid = Null
        !nNITotalUnderpayment = Null
        !nNITotalOverpayment = Null
        !nEENIUnderpayment = Null
        !nEENIOverpayment = Null
        !nERNIUnderpayment = Null
        !nERNIOverpayment = Null
    
    
    
        ' Set to defaults
        !optAPP = cNoAPP
        !optEarningsPeriod = cAnnualEarnings
        SetDefaultDates09
    
        ' Set focus
        !Surname.SetFocus
    End With
    
    
Exit_ClearForm09:
    DoCmd.Hourglass False
    Exit Sub
    
Err_ClearForm09:
    
    MsgBox Error$
    
    Resume Exit_ClearForm09



End Sub

Sub ClearPayments()
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : ClearPayments
' Purpose       : Clear the payments details
'Author     Christopher Schuler
'Date       12 August 1999
'Purpose    NIC rebate fields added
    
    On Error GoTo Err_ClearPayments
    With Forms![frmDirectorsMain]
        !nNITotalPaid = Null
        !nEENITotalPaid = Null
        !nERNITotalPaid = Null
        !txtRebate1Paid = Null
        !txtRebate2Paid = Null
        !nNITotalUnderpayment = Null
        !nNITotalOverpayment = Null
        !nEENIUnderpayment = Null
        !nEENIOverpayment = Null
        !nERNIUnderpayment = Null
        !nERNIOverpayment = Null
        !txtRebate1UnderPaid = Null
        !txtRebate1OverPaid = Null
        !txtRebate2UnderPaid = Null
        !txtRebate2OverPaid = Null
    End With
Exit_ClearPayments:
    Exit Sub
    
Err_ClearPayments:
    MsgBox Error$
    Resume Exit_ClearPayments

End Sub


Sub directorCalc01(Taxyear As Integer, myForm As Form)
' Author   : Christopher Schuler
' Date     : 16 November 2000
' Purpose  : To calculate the Directors contributions from 2001

' Author   : Christopher Schuler
' Date     : 27 January 2004
' Purpose  : v1279407 Re-write to correct error when same category is used more than once in same year

' Name : Ben Stephenson
' Date : 13/09/2011
' Tag  : BSTE_20110913
' Desc : EARS000173309564 - Where APP is present, cats G and E should take priority over cat B
    
    ' nYear            : Tax Year
    ' bAPP             : Appropriate Personal Pension option, true/false
    ' bAnnualEarnings  : Earnings period annual(true)/weekly(false)
    ' nNumberOfWeeks   : Number of pro-rata weeks
    Dim nYear As Integer, bAPP  As Integer, bAnnualEarnings As Integer, nNumberOfWeeks As Integer
    ' sCategory     : Current record's category
    ' sGatheringCat : gathering categories order
    Dim sCategory  As String, sGatheringCat As String
    ' sCatOrder : Order in which details used in contributions, determined by category
    ' nPosition : Position in category order string
    ' Criterion : Condition used to limit the search to specified category
    Dim sCatOrder As String, nposition As Integer, Criterion As String
    Dim yearvalue
    
    Dim LEL As Currency         'Lower Earnings Limit
    Dim ET As Currency       'Earnings Threshold
    Dim UEL As Currency         'Upper Earnings Limit
    Dim RateEE                  'Employee rate of NI contributions
    Dim RateER                  'Employer rate of NI contributions
    Dim UpperRateEE             'Employee higher rate of NI contributions
    Dim UAPRateEE               ' Employee Rate Above UAP
    Dim UpperRateER             'Employer higher rate of NI contributions
    Dim EERebateRate              'Employee rate of rebate of NI contributions
    Dim ERRebateRate              'Employer rate of rebate of NI contributions
    Dim i As Integer            'Counter for each record/category
    Dim J As Integer             'Counter
    ReDim gpay(10) As Currency   'Gross Pay for each Category
    Dim totalgross As Currency   'Cumulative Gross Pay
    Dim UpToLEL As Currency      'Amount of earnings for each category up to and including LEL
    Dim LELtoET As Currency      'Amount of earnings for each category above LEL, up to and including ET
    Dim UAPToUEL As Currency     'Amount of earnings for each category above UAP, up to and including UEL
    Dim ETtoUEL As Currency      'Amount of earnings for each category above ET, up to and including UEL
    Dim AboveUEL As Currency     'Amount of earnings for each category above UEL
   
    
    Dim FlagUptoLEL As Integer     'Substitute for FlagUptoLEL(i)
    Dim FlagLELToET As Integer     'Substitute for FlagLELToET(i)
    Dim FlagUAPToUEL As Integer    'Substitute for FlagUAPToUEL(i)
    Dim FlagETtoUEL As Integer     'Substitute for FlagETtoUEL(i)

    Dim totalgrossprevious As Currency      'The sum of Gross pays prior to the current run through the loop
    Dim flagMultiCat As Integer       'The flag for multiple categories where the first category has no earnings (UptoLEL = 0 etc)
    Dim flagnposition As Integer      'This flag remembers the previous category position in sGatheringCat
    Dim npos As Integer               'This takes over from nposition as the position in the category order string once UEL has been reached
    Dim FlagUELReached As Integer          'The flag for multiple categories where the UEL has been reached
    
    On Error GoTo Err_directorCalc01
    
    
    DoCmd.Hourglass True


    Dim DB As Database
    Dim DataTable As DAO.Recordset
    Dim DataTableClone As DAO.Recordset
    Dim Balance     'Difference between EEconts and EENIRebate when primary conts are less than primary rebate
  
    
    
    ' Check to see if Tax, App and Period set
    If bSettingsCorrect01(myForm) = False Then
        Exit Sub
    End If
    
    ' Tax Yr
    nYear = Forms(myForm.Name)![cboTaxYear]
    
    ' APP option
    bAPP = Forms(myForm.Name).[optAPP]

    ' Earnings period
    bAnnualEarnings = Forms(myForm.Name)![optEarningsPeriod]

    ' Number of pro-rata weeks
    nNumberOfWeeks = nGetNumberOfProRataWeeks01(myForm)
    
    
' Convert the year into a number representation.
yearvalue = Val(Forms(myForm.Name)!cboTaxYear)



' Use the index to locate the year.
NIRateBandTable.Index = "PrimaryKey"
NIRateBandTable.Seek "=", yearvalue
          
        If bAnnualEarnings > 1 Then
                'pro-rata limits
            LEL = NIRateBandTable![WkLEL] * nNumberOfWeeks
            
           
             
             'ETs must be rounded up to next whole pound for pro-rata calcs.
            
            ET = NIRateBandTable![AnnER_ET] * nNumberOfWeeks / 52

            If ET > Int(ET) Then
                ET = Int(ET) + 1
            End If

            UEL = NIRateBandTable![WkUEL] * nNumberOfWeeks
        
        Else
            
            LEL = NIRateBandTable![AnnLEL]
            ET = NIRateBandTable![AnnER_ET]
            UEL = NIRateBandTable![AnnUEL]

        End If

  'set details on form
Forms(myForm.Name).txtLELorEE_ET = LEL
Forms(myForm.Name)!txtLELorETorER_ET = ET
Forms(myForm.Name)!txtUEL = UEL
    
        'Set the category order of processing
If Taxyear > 2002 Then  'cats L and J added

    If bAPP = cNoAPP Then
        sCatOrder = "GEBFDASLJC"
    Else
      'sCatOrder = "BGEAFDJSLC"    'BSTE_20110913
       sCatOrder = "GEBAFDJSLC"    'BSTE_20110913
    End If
 
Else
    If bAPP = cNoAPP Then
        sCatOrder = "GEBFDASC"
    Else
        'sCatOrder = "BGEAFDSC"   'BSTE_20110913
        sCatOrder = "GEBAFDSC"   'BSTE_20110913
    End If
End If
    
    Set DB = CurrentDb()
    
    Set DataTable = DB.OpenRecordset("Select * from [tblDirectorsContributions01]")
   
    Set DataTableClone = DataTable.Clone()
    
    
    ' Check year set
    If IsNull(Forms(myForm.Name)!cboTaxYear) Or Forms(myForm.Name)!cboTaxYear = "" Then
        
            MsgBox "Tax Year Not set.", 48, "Information"
            ' Close both references.
            DataTableClone.Close
            DataTable.Close
            DB.Close

            'directorCalc01 = False
            GoTo Exit_directorCalc01
    
    End If

    
    ' If no records at all, then quit.
    If DataTable.BOF And DataTable.EOF Then
        
            MsgBox "No entries in table.", 48, "Information"
            ' Close both references.
            DataTableClone.Close
            DataTable.Close
            DB.Close

            GoTo Exit_directorCalc01
    
    End If


    ' Loop around each category, in order specified
For nposition = 1 To Len(sCatOrder)

            ' Loop around selected category
           
    sGatheringCat = Mid$(sCatOrder, nposition, 1)
    Criterion = "Category = '" + sGatheringCat + "'"
                    
    DataTable.FindFirst Criterion
           
    Do Until DataTable.NoMatch
    
        DataTable.Edit
                  
        sCategory = sGatheringCat

        Class1RateTable.Index = "PrimaryKey"
        Class1RateTable.Seek "=", yearvalue, sCategory
                
                ' If the year is not found.
        If Class1RateTable.NoMatch Then
                
            Exit Sub
                
        Else
                    'EmployeeRate, EmployerRates
            RateEE = Class1RateTable![EE_Rate]
            UpperRateEE = Class1RateTable![EE_AboveUEL]
            UAPRateEE = Class1RateTable![EE_AboveUAP]
            RateER = Class1RateTable![ER_Rate]
            UpperRateER = Class1RateTable![ER_AboveUEL]
            EERebateRate = Class1RateTable![EE NIC Rebate]
            ERRebateRate = Class1RateTable![ER NIC Rebate]
                    
        End If
               'To calculate the total of gross pay at each pass through when UEL not reached

                       'Record counter
        i = i + 1
                    
        gpay(i) = DataTable![Gross Pay]
                   
        If FlagUELReached <> 1 Then
            totalgross = totalgross + gpay(i)
        End If

                'To calculate the amount of gross pay upto and including the lower earnings limit
        If FlagUptoLEL = 1 Then
                    
            UpToLEL = 0
                    
        ElseIf totalgross > UEL And FlagUELReached = 1 Then

            UpToLEL = LEL

        Else
                        
            If totalgross >= LEL Then
                
                UpToLEL = LEL
                FlagUptoLEL = 1
            
            Else
                
                UpToLEL = 0
            
            End If
        
        End If

                 'To calculate the amount of gross pay above lower earnings limit upto and including the earnings threshold
        If FlagLELToET = 1 Then
                    
            LELtoET = 0
                    

        ElseIf totalgross > UEL And FlagUELReached = 1 Then

            LELtoET = ET - LEL
                
        Else
            
            If totalgross > LEL And totalgross <= ET Then
                
                LELtoET = IIf(totalgrossprevious > LEL, totalgross - totalgrossprevious, totalgross - LEL)
                             
            ElseIf totalgross > ET Then
                
                LELtoET = IIf(totalgrossprevious > LEL, ET - totalgrossprevious, ET - LEL)
                    
                    FlagLELToET = 1
            Else
                
                LELtoET = 0
            
            End If
        
        End If


                 'To calculate the amount of gross pay above employer earnings threshold upto and including the upper earnings limit
        If FlagETtoUEL = 1 Then
                    
            ETtoUEL = 0
                    
        ElseIf totalgross > UEL And FlagUELReached = 1 Then

            ETtoUEL = IIf(totalgrossprevious > ET, UEL - totalgrossprevious, UEL - ET)
                
        Else
            
            If totalgross > ET And totalgross <= UEL Then
                
                ETtoUEL = IIf(totalgrossprevious > ET, totalgross - totalgrossprevious, totalgross - ET)
                             
            ElseIf totalgross > UEL Then
                
                ETtoUEL = IIf(totalgrossprevious > ET, UEL - totalgrossprevious, UEL - ET)
                FlagETtoUEL = 1
            
            Else
                
                ETtoUEL = 0
                End If
            
            End If

                'To calculate the amount of gross pay above the upper earnings limit
            If totalgross > UEL Then
                       
                AboveUEL = IIf(totalgrossprevious > UEL, totalgross - totalgrossprevious, totalgross - UEL)
                
            Else
                    
                AboveUEL = 0
                
            End If
                
                   ' Update table entries
            DataTable.Edit
               
            With DataTable
                ![UpToLEL] = UpToLEL
                ![LELtoET] = LELtoET
                ![ETtoUEL] = ETtoUEL
                ![AboveUEL] = AboveUEL
                
                If Taxyear > 2002 Then
                    
                    ![EEConts] = curRound(ETtoUEL * RateEE) + curRound(AboveUEL * UpperRateEE)
                
                Else
                    
                    ![EEConts] = curRound(ETtoUEL * RateEE)
                
                End If
                
                ![ERConts] = curRound(ETtoUEL * RateER) + curRound(AboveUEL * UpperRateER)
                ![TotalConts] = IIf(IsNull(![ERConts]), 0, (![ERConts])) + IIf(IsNull(![EEConts]), 0, (![EEConts]))
                ![EENIRebate] = curRound(LELtoET * EERebateRate)
                ![ERNIRebate] = curRound(LELtoET * ERRebateRate)
                ![LEL] = LEL
                ![ET] = ET
                ![UEL] = UEL
                ![RateEE] = RateEE
                ![RateER] = RateER
                ![UpperRateEE] = UpperRateEE
                ![UpperRateER] = UpperRateER
                ![EERebateRate] = EERebateRate
                ![ERRebateRate] = ERRebateRate
                    
                If ![EEConts] < ![EENIRebate] Then
                        
                    Balance = ![EENIRebate] - ![EEConts]
                    ![EENIRebate] = ![EENIRebate] - Balance
                    ![ERNIRebate] = ![ERNIRebate] + Balance
                
                End If
                    
                If Taxyear > 2002 Then
                    
                    ![EEConts2003] = ![EEConts] - ![EENIRebate]
                    ![ERConts2003] = ![ERConts] - ![ERNIRebate]
                    ![TotalConts2003] = IIf(IsNull(![ERConts2003]), 0, (![ERConts2003])) + IIf(IsNull(![EEConts2003]), 0, (![EEConts2003]))
    
                End If
                    
                .Update
            
            End With
           
           'Copy to record at the bottom of the table
            With DataTableClone
                .AddNew
                
                ![Category] = DataTable![Category] & "."
                ![Gross Pay] = DataTable![Gross Pay]
           
                ![UpToLEL] = DataTable![UpToLEL]
                ![LELtoET] = DataTable![LELtoET]
                ![ETtoUEL] = DataTable![ETtoUEL]
                ![EEConts] = DataTable![EEConts]
                ![AboveUEL] = DataTable![AboveUEL]
                ![ERConts] = DataTable![ERConts]
                ![TotalConts] = DataTable![TotalConts]
                ![EENIRebate] = DataTable![EENIRebate]
                ![ERNIRebate] = DataTable![ERNIRebate]
                ![LEL] = DataTable![LEL]
                ![ET] = DataTable![ET]
                ![UEL] = DataTable![UEL]
                ![RateEE] = DataTable![RateEE]
                ![RateER] = DataTable![RateER]
                ![UpperRateEE] = DataTable![UpperRateEE]
                ![UpperRateER] = DataTable![UpperRateER]
                ![EERebateRate] = DataTable![EERebateRate]
                ![ERRebateRate] = DataTable![ERRebateRate]
                If Taxyear > 2002 Then
                    ![EEConts2003] = DataTable![EEConts2003]
                    ![ERConts2003] = DataTable![ERConts2003]
                    ![TotalConts2003] = DataTable![TotalConts2003]
                End If
                
                .Update
            End With
            
            totalgrossprevious = totalgross
             
            ' Remove the original record
            DataTable.Delete
            DataTable.FindNext Criterion
         
        Loop   'Datatable.NoMatch

Next

    ' Close both references.
    DataTableClone.Close
    DataTable.Close
    DB.Close
    
DoCmd.RunSQL "update tblDirectorsContributions01 set category = left([category],1)" 'remove full stop
    
    ' Update subform
    Forms(myForm.Name).Recalc
    If Taxyear < 2003 Then
        calcDirectorsTotals01
    ElseIf Taxyear > 2008 Then
        calcDirectorsTotals09
    Else
        calcDirectorsTotals03
    End If


Exit_directorCalc01:
    DoCmd.Hourglass False
    
    Exit Sub

Err_directorCalc01:
    
    MsgBox Error$
    Resume Exit_directorCalc01


End Sub
Sub directorCalc16(Taxyear As Integer, myForm As Form)
' Author            : Christopher Sneddon
' Date              : 18 November 2015
' Purpose           : Changes in calculations from 2016
    
    Dim nYear As Integer                ' Tax Year
    Dim bAPP  As Integer                ' Appropriate Personal Pension
    Dim bAnnualEarnings As Integer      ' Earnings period Annual - true, weekly - false
    Dim nNumberOfWeeks As Integer       ' No of Pro-Rata weeks
    Dim sCategory  As String            ' Record category
    Dim sGatheringCat As String         ' Categories in order
    Dim sCatOrder As String             ' Order in which details used in contributions
    Dim nposition As Integer            ' Position in category order string
    Dim Criterion As String             ' Condition used to limit the search to specified category
    Dim yearvalue
    Dim FlagLELReached
    Dim FlagSTReached
    Dim FlagPTReached
    Dim FlagETReached
    Dim FlagUELReached
    Dim FlagSTUELReached
    Dim FlagUSTReached
    Dim FlagAUSTReached
    Dim FlagUELAbove
    Dim FlagUSTAbove
    Dim FlagAUSTAbove
    Dim TotalGrosspay As Currency
    Dim TotalGrossPrev As Currency
    Dim gpay(10)

        
    Dim LEL As Currency         'Lower Earnings Limit
    Dim ST As Currency          'Secondary Threshold
    Dim ET_PT As Currency       'Earnings Threshold/Primary Threshold
    Dim AUST As Currency        'Apprentice Upper Secondary Threshold
    Dim UST As Currency         'Upper Secondary Threshold
    Dim UEL As Currency         'Upper Earnings Limit
    Dim RateEE                  'Employee rate of NI contributions
    Dim RateER                  'Employer rate of NI contributions
    Dim UpperRateEE             'Employee higher rate of NI contributions
    Dim AUSTRateER              'Employer rate Above AUST
    Dim USTRateER               'Employer rate Above UAP
    Dim UpperRateER             'Employer higher rate of NI contributions
    Dim EERebateRate            'Employee rate of rebate of NI contributions
    Dim ERRebateRate            'Employer rate of rebate of NI contributions
    Dim ERToST                  'Employer Rate from ST
    
    Dim i As Integer            'Counter for each record/category
    Dim J As Integer            'Counter
    
    Dim UpToLEL As Currency     'Amount of earnings for each category up to and including LEL
    Dim LELToST As Currency     'Amount of earnings for each category above LEL up to ST
    Dim LELToPT As Currency     'Amount of earnings for each category above LEL up to PT
    Dim STToPT As Currency      'Amount of earnings from ST to PT
    Dim PTToST As Currency      'Amount of earnings from PT to ST
    Dim LELtoET As Currency     'Amount of earnings for each category above LEL, up to and including ET
    Dim ETtoUEL As Currency     'Amount of earnings for each category above ET, up to and including UEL
    Dim STToUEL As Currency     'Amount of earnings for each category above ET, up to and including UEL
    Dim ETToUST As Currency     'Amount of earnings for each category above PT/ET, up to and including UST
    Dim STToUST As Currency     'Amount of earnings for each category above ST, up to and including UST
    Dim ETToAUST As Currency    'Amount of earnings for each category above PT/ET, up to and including AUST
    Dim STToAUST As Currency    'Amount of earnings for each category above ST, up to and including AUST
    Dim AboveUEL As Currency    'Amount of earnings for each category above UEL
    Dim AboveAUST As Currency   'Amount of earnings for each category above AUST
    Dim AboveUST As Currency    'Amount of earnings for each category above UST
    
    Dim EEConts As Currency     ' Employee contributions
    Dim ERConts As Currency     ' Employer contributions
    Dim EENIRebate As Currency  ' Employee rebate
    Dim ERNIRebate As Currency  ' Employer rebate
    
    Dim npos As Integer                  'This takes over from nposition as the position in the category order string once UEL has been reached
    
    Dim DB As Database
    Dim DataTable As DAO.Recordset
    Dim DataTableClone As DAO.Recordset
    Dim Balance     'Difference between EEconts and EENIRebate when primary conts are less than primary rebate
  
    On Error GoTo Err_directorCalc16
    
    DoCmd.Hourglass True
    
    ' Check to see if Tax, App and Period set
    If bSettingsCorrect01(myForm) = False Then
        Exit Sub
    End If
    
    Set DB = CurrentDb()
    Set DataTable = DB.OpenRecordset("Select * from [tblDirectorsContributions16]")
    Set DataTableClone = DataTable.Clone()
    
    ' If no records at all, then quit.
    If DataTable.BOF And DataTable.EOF Then
        MsgBox "No entries in table.", 48, "Information"
        ' Close both table references.
        DataTableClone.Close
        DataTable.Close
        DB.Close

        GoTo Exit_directorCalc16
    End If
    
    ' Tax Yr
    nYear = Forms(myForm.Name)![cboTaxYear]
    
    ' APP option
    bAPP = Forms(myForm.Name).[optAPP]

    ' Earnings period
    bAnnualEarnings = Forms(myForm.Name)![optEarningsPeriod]

    ' Number of pro-rata weeks
    nNumberOfWeeks = nGetNumberOfProRataWeeks01(myForm)
     
    ' Convert the year into a number representation.
    yearvalue = Val(Forms(myForm.Name)!cboTaxYear)

    ' Use the index to locate the year.
    NIRateBandTable.Index = "PrimaryKey"
    NIRateBandTable.Seek "=", yearvalue
          
    If bAnnualEarnings > 1 Then
        LEL = NIRateBandTable![WkLEL] * nNumberOfWeeks
        
        If yearvalue > 2010 Then
            ST = (NIRateBandTable![AnnST] / 52) * nNumberOfWeeks
            ET_PT = (NIRateBandTable![AnnPT] / 52) * nNumberOfWeeks
            
            If ST > Int(ST) Then
                ST = Int(ST) + 1
            End If
            If ET_PT > Int(ET_PT) Then
                ET_PT = Int(ET_PT) + 1
            End If
        Else
            ET_PT = (NIRateBandTable![AnnER_ET] / 52) * nNumberOfWeeks
            If ET_PT > Int(ET_PT) Then
                ET_PT = Int(ET_PT) + 1
            End If
        End If
        
        UEL = NIRateBandTable![AnnUEL] * nNumberOfWeeks / 52 'CCA10290
        If UEL > Int(UEL) Then
            UEL = Int(UEL) + 1
        End If
    Else
            LEL = NIRateBandTable![AnnLEL]
            ST = NIRateBandTable![AnnST]
            ET_PT = NIRateBandTable![AnnPT]
            AUST = NIRateBandTable![AnnUST]
            UST = NIRateBandTable![AnnUST]
            UEL = NIRateBandTable![AnnUEL]
    End If

    'Set the category order of processing
    If bAPP = cNoAPP Then
        'sCatOrder = "GEBFHMASLZJC" ' subject to change
        sCatOrder = "BMAZJC" ' subject to change
    End If

    ' Loop around each category, in order specified
    For nposition = 1 To Len(sCatOrder)
        ' Loop around selected category
        sGatheringCat = Mid$(sCatOrder, nposition, 1)
        Criterion = "Category = '" + sGatheringCat + "'"
        
        DataTable.FindFirst Criterion
           
        Do Until DataTable.NoMatch
            DataTable.Edit
                      
            sCategory = sGatheringCat
            Class1RateTable.Index = "PrimaryKey"
            Class1RateTable.Seek "=", yearvalue, sCategory
                    
            ' If the year is not found.
            If Class1RateTable.NoMatch Then
                Exit Sub
        
            Else
                RateEE = Class1RateTable![EE_Rate]
                UpperRateEE = Class1RateTable![EE_AboveUEL]
                EERebateRate = Class1RateTable![EE NIC Rebate]
                
                RateER = Class1RateTable![ER_Rate]
                UpperRateER = Class1RateTable![ER_AboveUEL]
                USTRateER = Class1RateTable![ER_AboveUST]
                AUSTRateER = Class1RateTable![ER_AboveAUST]
                
                ERRebateRate = Class1RateTable![ER_RebateToST]
                ERToST = Class1RateTable![ER_Rate]
                EERebateRate = Class1RateTable![EE NIC Rebate]
            
            End If
            
            ' For each pass through where the UAP has not been reached, we need to total the
            ' gross pay of each category
            i = i + 1
            
            gpay(i) = DataTable![Gross Pay]
            
            If FlagUELReached = 1 Then
                TotalGrosspay = TotalGrosspay + gpay(i)
            ElseIf TotalGrosspay < UEL Then
                TotalGrosspay = TotalGrosspay + gpay(i)
            Else
                TotalGrosspay = gpay(i)
            End If
            
            'Earnings up to LELcd /cc
            If FlagLELReached = 1 Then
                UpToLEL = 0
            ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                UpToLEL = LEL
            Else
                If TotalGrosspay >= LEL Then
                    UpToLEL = LEL
                    FlagLELReached = 1
                Else
                    UpToLEL = 0
                End If
            End If
            
            ' Cater for Post2010 years with the ST and PT
                
                If FlagSTReached = 1 Then
                    LELToPT = 0
                ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                    LELToPT = ET_PT
                Else
                    If TotalGrosspay > LEL And TotalGrosspay < ET_PT Then
                        LELToPT = IIf(TotalGrossPrev > LEL, TotalGrosspay - TotalGrossPrev, TotalGrosspay - LEL)
                    ElseIf TotalGrosspay >= ET_PT Then
                        LELToPT = ET_PT - LEL
                        FlagSTReached = 1
                    Else
                        LELToPT = 0
                    End If
                End If
                
                If FlagPTReached = 1 Then
                    PTToST = 0
                ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                    PTToST = ST
                Else
                    If TotalGrosspay > ET_PT And TotalGrosspay < ET_PT Then
                        PTToST = IIf(TotalGrossPrev > ET_PT, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ST)
                    ElseIf TotalGrosspay >= ET_PT Then
                        STToPT = ST - ET_PT
                        FlagPTReached = 1
                    Else
                        PTToST = 0
                    End If
                End If
                
            
            ' Earnings ET/PT to UEL
            If FlagUELReached = 1 Then
                ETtoUEL = 0
            ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                ETtoUEL = IIf(TotalGrossPrev > ET_PT, UEL - TotalGrossPrev, UEL - ET_PT)
            Else
                If TotalGrosspay > ET_PT And TotalGrosspay <= UEL Then
                    ETtoUEL = IIf(TotalGrossPrev > ET_PT, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ET_PT)
                ElseIf TotalGrosspay > UEL Then
                    ETtoUEL = IIf(TotalGrossPrev > ET_PT, UEL - TotalGrossPrev, UEL - ET_PT)
                    FlagUELReached = 1
                Else
                    ETtoUEL = 0
                End If
            End If
            
            ' Earnings ST to UEL for employers
            If FlagSTUELReached = 1 Then
                STToUEL = 0
            ElseIf TotalGrosspay > UEL And FlagSTUELReached = 1 Then
                ETtoUEL = IIf(TotalGrossPrev > ST, UEL - TotalGrossPrev, UEL - ST)
            Else
                If TotalGrosspay > ST And TotalGrosspay <= UEL Then
                    STToUEL = IIf(TotalGrossPrev > ST, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ST)
                ElseIf TotalGrosspay > UEL Then
                    STToUEL = IIf(TotalGrossPrev > ST, UEL - TotalGrossPrev, UEL - ST)
                    FlagSTUELReached = 1
                Else
                    STToUEL = 0
                End If
            End If
            
            ' Earnings ET/PT to UST
            If FlagUSTReached = 1 Then
                ETToUST = 0
            ElseIf TotalGrosspay > UST And FlagUSTReached = 1 Then
                ETToUST = IIf(TotalGrossPrev > ET_PT, UST - TotalGrossPrev, UST - ET_PT)
            Else
                If TotalGrosspay > ET_PT And TotalGrosspay <= UEL Then
                    ETToUST = IIf(TotalGrossPrev > ET_PT, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ET_PT)
                ElseIf TotalGrosspay > UST Then
                    ETToUST = IIf(TotalGrossPrev > ET_PT, UST - TotalGrossPrev, UST - ET_PT)
                    FlagUSTReached = 1
                Else
                    ETToUST = 0
                End If
            End If
            
            
            ' Earnings ET/PT to AUST
            If FlagAUSTReached = 1 Then
                ETToAUST = 0
            ElseIf TotalGrosspay > AUST And FlagAUSTReached = 1 Then
                ETToAUST = IIf(TotalGrossPrev > ET_PT, AUST - TotalGrossPrev, AUST - ET_PT)
            Else
                If TotalGrosspay > ET_PT And TotalGrosspay <= AUST Then
                    ETToUST = IIf(TotalGrossPrev > ET_PT, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ET_PT)
                ElseIf TotalGrosspay > AUST Then
                    ETToUST = IIf(TotalGrossPrev > ET_PT, AUST - TotalGrossPrev, AUST - ET_PT)
                    FlagUSTReached = 1
                Else
                    ETToUST = 0
                End If
            End If
            
                
            ' Earnings above UEL
            If TotalGrosspay > UEL Then
                AboveUEL = IIf(TotalGrossPrev > UEL, TotalGrosspay - TotalGrossPrev, TotalGrosspay - UEL)
            Else
                AboveUEL = 0
            End If
            ' Earnings above UST
            If TotalGrosspay > UST Then
                AboveUST = IIf(TotalGrossPrev > UST, TotalGrosspay - TotalGrossPrev, TotalGrosspay - UST)
            Else
                AboveUST = 0
            End If
            ' Earnings above AUST
            If TotalGrosspay > AUST Then
                AboveAUST = IIf(TotalGrossPrev > AUST, TotalGrosspay - TotalGrossPrev, TotalGrosspay - AUST)
            Else
                AboveAUST = 0
            End If

            
            ' Determine and update the earnings levels on the table
            DataTable.Edit
            With DataTable
            
                ![UpToLEL] = UpToLEL
                ![LELToPT] = LELToPT + PTToST
                ![LELtoET] = LELToPT
                ![LELToST] = LELToST
                ![STToPT] = STToPT
                ![ETtoUEL] = ETtoUEL
                ![ETToUST] = ETToUST
                ![ETToAUST] = ETToAUST
                ![STToUEL] = STToUEL
                ![AboveUEL] = AboveUEL
                ![AboveUST] = AboveUST
                ![AboveAUST] = AboveAUST
    
                ![EENIRebate] = curRound(![LELtoET] * EERebateRate)
                ![EEConts] = (curRound(ETtoUEL * RateEE) + curRound(AboveUEL * UpperRateEE))
                
                'values are different LEL - ST / LEL - PT figure out which it needs
                ![ERNIRebate] = curRound((LELToPT) * ERRebateRate)
                ![ERConts] = (curRound(STToUEL * RateER) + curRound(AboveUEL * UpperRateER))
                '![ERConts] = (curRound(STToPT * RateER) + curRound(ETtoUEL * RateER) + curRound(AboveUEL * UpperRateER))
              
                ![TotalConts] = IIf(IsNull(![ERConts]), 0, (![ERConts])) + IIf(IsNull(![EEConts]), 0, (![EEConts]))

                ![LEL] = LEL
                ![UEL] = UEL
                ![UST] = UST
                ![AUST] = AUST
                
                
                If ![EEConts] < ![EENIRebate] Then
                    Balance = ![EENIRebate] - ![EEConts]
                    ![EENIRebate] = ![EENIRebate] - Balance
                    ![ERNIRebate] = ![ERNIRebate] + Balance
                End If
                ![EEConts2009] = ![EEConts] - ![EENIRebate]
                ![ERConts2009] = ![ERConts] - ![ERNIRebate]
                ![TotalConts2009] = IIf(IsNull(![ERConts2009]), 0, (![ERConts2009])) + IIf(IsNull(![EEConts2009]), 0, (![EEConts2009]))
                
                ![RateEE] = RateEE
                ![RateER] = RateER
                '![UAPRateEE] = UAPRateEE
                '![UAPRateER] = UAPRateER
                ![UpperRateEE] = UpperRateEE
                ![UpperRateER] = UpperRateER
                ![EERebateRate] = EERebateRate
                ![ERRebateRate] = ERRebateRate
                ![ERToST] = ERToST ' why is this here?
                .Update
            End With
       
           'Copy to record at the bottom of the table
            With DataTableClone
                .AddNew
                
                ![Category] = DataTable![Category] & "."
                ![Gross Pay] = DataTable![Gross Pay]
                
                ![UpToLEL] = DataTable![UpToLEL]
                ![LELToST] = DataTable![LELToST]
                ![LELToPT] = DataTable![LELToPT]
                ![STToPT] = DataTable![STToPT]
                ![LELtoET] = DataTable![LELtoET]
                ![LELtoET] = DataTable![LELToPT]
                ![ETToAUST] = DataTable![ETToAUST]
                ![ETToUST] = DataTable![ETToUST]
                ![ETtoUEL] = DataTable![ETtoUEL]
                ![EEConts] = DataTable![EEConts]
                ![AboveUEL] = DataTable![AboveUEL]
                ![AboveUST] = DataTable![AboveUST]
                ![AboveAUST] = DataTable![AboveAUST]
                ![ERConts] = DataTable![ERConts]
                ![TotalConts] = DataTable![TotalConts]
                ![EENIRebate] = DataTable![EENIRebate]
                ![ERNIRebate] = DataTable![ERNIRebate]
                ![EEConts2009] = DataTable![EEConts2009]
                ![ERConts2009] = DataTable![ERConts2009]
                ![TotalConts2009] = DataTable![TotalConts2009]
                
                ![ERToST] = DataTable![ERToST] ' what does this do!!
                ![RateEE] = DataTable![RateEE]
                ![RateER] = DataTable![RateER]
                ![UpperRateEE] = DataTable![UpperRateEE]
                ![UpperRateER] = DataTable![UpperRateER]
                ![EERebateRate] = DataTable![EERebateRate]
                ![ERRebateRate] = DataTable![ERRebateRate]
                
                .Update
            End With
             
            TotalGrossPrev = TotalGrosspay
             
            ' Remove the original record
            DataTable.Delete
            DataTable.FindNext Criterion
         
        Loop   'Datatable.NoMatch
    Next

    ' Close both references.
    DataTableClone.Close
    DataTable.Close
    DB.Close
    
    DoCmd.RunSQL "update tblDirectorsContributions16 set category = left([category],1)" 'remove full stop
    
    ' Update subform
    
    Forms(myForm.Name).Recalc
    If Taxyear < 2003 Then
        calcDirectorsTotals01
        
    ElseIf Taxyear > 2008 And Taxyear < 2016 Then
        calcDirectorsTotals09
    ElseIf Taxyear > 2015 Then
        calcDirectorsTotals16
    Else
        calcDirectorsTotals03
    End If
    
Exit_directorCalc16:
    DoCmd.Hourglass False
    
    Exit Sub

Err_directorCalc16:
    
        MsgBox Error$ & " in directorCalc16"
    Resume Exit_directorCalc16


End Sub



Sub directorCalc09(Taxyear As Integer, myForm As Form)
' Author            : Christopher Sneddon
' Date              : 20 march 2009
' Purpose           : Changes in calculations from 2009

' Name : Ben Stephenson
' Date : 13/09/2011
' Tag  : BSTE_20110913
' Desc : EARS000173309564 - Where APP is present, cats G and E should take priority over cat B
    
    Dim nYear As Integer                ' Tax Year
    Dim bAPP  As Integer                ' Appropriate Personal Pension
    Dim bAnnualEarnings As Integer      ' Earnings period Annual - true, weekly - false
    Dim nNumberOfWeeks As Integer       ' No of Pro-Rata weeks
    Dim sCategory  As String            ' Record category
    Dim sGatheringCat As String         ' Categories in order
    Dim sCatOrder As String             ' Order in which details used in contributions
    Dim nposition As Integer            ' Position in category order string
    Dim Criterion As String             ' Condition used to limit the search to specified category
    Dim yearvalue
    Dim FlagLELReached
    Dim FlagSTReached
    Dim FlagPTReached
    Dim FlagETReached
    Dim FlagUAPReached
    Dim FlagUELReached
    Dim FlagUSTReached
    Dim FlagUELAbove
    Dim TotalGrosspay As Currency
    Dim TotalGrossPrev As Currency
    Dim gpay(10)

        
    Dim LEL As Currency         'Lower Earnings Limit
    Dim ST As Currency          'Secondary Threshold
    Dim ET_PT As Currency       'Earnings Threshold/Primary Threshold
    Dim UAP As Currency         'Uapper Accrual point
    Dim UST As Currency         'Upper Secondary Threshold
    Dim UEL As Currency         'Upper Earnings Limit
    Dim RateEE                  'Employee rate of NI contributions
    Dim RateER                  'Employer rate of NI contributions
    Dim UpperRateEE             'Employee higher rate of NI contributions
    Dim UAPRateEE               'Employee rate Above UAP
    Dim UAPRateER               'Employer rate Above UAP
    Dim USTRateER               'Employer rate Above UAP
    Dim UpperRateER             'Employer higher rate of NI contributions
    Dim EERebateRate            'Employee rate of rebate of NI contributions
    Dim ERRebateRate            'Employer rate of rebate of NI contributions
    Dim ERToST                  'Employer Rate from ST
    
    Dim i As Integer            'Counter for each record/category
    Dim J As Integer            'Counter
    
    Dim UpToLEL As Currency     'Amount of earnings for each category up to and including LEL
    Dim LELToST As Currency     'Amount of earnings for each category above LEL up to ST
    Dim LELToPT As Currency     'Amount of earnings for each category above LEL up to PT
    Dim STToPT As Currency      'Amount of earnings from ST to PT
    Dim PTToST As Currency      'Amount of earnings from PT to ST
    Dim LELtoET As Currency     'Amount of earnings for each category above LEL, up to and including ET
    Dim ETtoUAP As Currency     'Amount of earnings for each category above ET, up to and including UEL
    Dim STToUAP As Currency     'Amount of earnings for each category above ET, up to and including UEL
    Dim UAPToUEL As Currency    'Amount of earnings for each category above UAP, up to and including UEL
    Dim UAPToUST As Currency    'Amount of earnings for each category above UAP, up to and including UST
    Dim AboveUEL As Currency    'Amount of earnings for each category above UEL
    Dim AboveUAP As Currency    'Amount of earnings for each category above UAP
    Dim AboveUST As Currency    'Amount of earnings for each category above UST
    
    Dim EEConts As Currency     ' Employee contributions
    Dim ERConts As Currency     ' Employer contributions
    Dim EENIRebate As Currency  ' Employee rebate
    Dim ERNIRebate As Currency  ' Employer rebate
    
    Dim npos As Integer                  'This takes over from nposition as the position in the category order string once UEL has been reached
    
    Dim DB As Database
    Dim DataTable As DAO.Recordset
    Dim DataTableClone As DAO.Recordset
    Dim Balance     'Difference between EEconts and EENIRebate when primary conts are less than primary rebate
  
    On Error GoTo Err_directorCalc09
    
    DoCmd.Hourglass True
    
    ' Check to see if Tax, App and Period set
    If bSettingsCorrect01(myForm) = False Then
        Exit Sub
    End If
    
    Set DB = CurrentDb()
    Set DataTable = DB.OpenRecordset("Select * from [tblDirectorsContributions09]")
    Set DataTableClone = DataTable.Clone()
    
    ' If no records at all, then quit.
    If DataTable.BOF And DataTable.EOF Then
        MsgBox "No entries in table.", 48, "Information"
        ' Close both table references.
        DataTableClone.Close
        DataTable.Close
        DB.Close

        GoTo Exit_directorCalc09
    End If
    
    ' Tax Yr
    nYear = Forms(myForm.Name)![cboTaxYear]
    
    ' APP option
    bAPP = Forms(myForm.Name).[optAPP]

    ' Earnings period
    bAnnualEarnings = Forms(myForm.Name)![optEarningsPeriod]

    ' Number of pro-rata weeks
    nNumberOfWeeks = nGetNumberOfProRataWeeks01(myForm)
     
    ' Convert the year into a number representation.
    yearvalue = Val(Forms(myForm.Name)!cboTaxYear)

    ' Use the index to locate the year.
    NIRateBandTable.Index = "PrimaryKey"
    NIRateBandTable.Seek "=", yearvalue
          
    If bAnnualEarnings > 1 Then
        LEL = NIRateBandTable![WkLEL] * nNumberOfWeeks
        
        If yearvalue > 2010 Then
            ST = (NIRateBandTable![AnnST] / 52) * nNumberOfWeeks
            ET_PT = (NIRateBandTable![AnnPT] / 52) * nNumberOfWeeks
            
            If ST > Int(ST) Then
                ST = Int(ST) + 1
            End If
            If ET_PT > Int(ET_PT) Then
                ET_PT = Int(ET_PT) + 1
            End If
        Else
            ET_PT = (NIRateBandTable![AnnER_ET] / 52) * nNumberOfWeeks
            If ET_PT > Int(ET_PT) Then
                ET_PT = Int(ET_PT) + 1
            End If
        End If
        
        UAP = NIRateBandTable![wkUAP] * nNumberOfWeeks
        
        UEL = NIRateBandTable![AnnUEL] * nNumberOfWeeks / 52 'CCA10290
        If UEL > Int(UEL) Then
            UEL = Int(UEL) + 1
        End If
    Else
        LEL = NIRateBandTable![AnnLEL]
        
        If yearvalue > 2010 Then
            ST = NIRateBandTable![AnnST]
            ET_PT = NIRateBandTable![AnnPT]
        Else
            ET_PT = NIRateBandTable![AnnER_ET]
        End If
        
        UAP = NIRateBandTable![AnnUAP]
        If yearvalue > 2014 Then
            UST = NIRateBandTable![AnnUST]
        End If
        UEL = NIRateBandTable![AnnUEL]
    End If

    'Set the category order of processing
    If bAPP = cNoAPP Then
        'sCatOrder = "GEBFDASLJC"
        If Taxyear > 2014 Then
        sCatOrder = "GEBFIDMASKLZJC" ' CCA10939
        Else
        sCatOrder = "GEBFDAMSLJC" ' TEST
        End If
    Else
      ' sCatOrder = "BGEAFDJSLC"    'BSTE_20110913
      '  sCatOrder = "GEBAFDJSLC"    'BSTE_20110913
      If Taxyear > 2014 Then
        sCatOrder = "GEBMAFIDZJSKLC" ' CCA10930
      Else
        sCatOrder = "GEBAMFDJSLC"    'Test
      End If
    End If

    ' Loop around each category, in order specified
    For nposition = 1 To Len(sCatOrder)
        ' Loop around selected category
        sGatheringCat = Mid$(sCatOrder, nposition, 1)
        Criterion = "Category = '" + sGatheringCat + "'"
        
        DataTable.FindFirst Criterion
           
        Do Until DataTable.NoMatch
            DataTable.Edit
                      
            sCategory = sGatheringCat
            Class1RateTable.Index = "PrimaryKey"
            Class1RateTable.Seek "=", yearvalue, sCategory
                    
            ' If the year is not found.
            If Class1RateTable.NoMatch Then
                Exit Sub
        
            Else
                RateEE = Class1RateTable![EE_Rate]
                UpperRateEE = Class1RateTable![EE_AboveUEL]
                UAPRateEE = Class1RateTable![EE_AboveUAP]
                EERebateRate = Class1RateTable![EE NIC Rebate]
                
                RateER = Class1RateTable![ER_Rate]
                UpperRateER = Class1RateTable![ER_AboveUEL]
                UAPRateER = Class1RateTable![ER_AboveUAP]
                USTRateER = Class1RateTable![ER_AboveUST]
                
                If Taxyear > 2010 Then
                    ERRebateRate = Class1RateTable![ER_RebateToST]
                    ERToST = Class1RateTable![ER_Rate]
                Else
                    ERRebateRate = Class1RateTable![ER NIC Rebate]
                End If
                
                EERebateRate = Class1RateTable![EE NIC Rebate]
            End If
            
            ' For each pass through where the UAP has not been reached, we need to total the
            ' gross pay of each category
            i = i + 1
            
            gpay(i) = DataTable![Gross Pay]
            
            'Fix for  CSNE
            
            'If TotalGrosspay > 0 Then
            'TotalGrosspay = gpay(i) + TotalGrossPrev
            'End If
            
            If FlagUELReached = 1 Then
                TotalGrosspay = TotalGrosspay + gpay(i)
            ElseIf TotalGrosspay < UEL Then
                TotalGrosspay = TotalGrosspay + gpay(i)
            Else
                TotalGrosspay = gpay(i)
            End If
            
            'Earnings up to LELcd /cc
            If FlagLELReached = 1 Then
                UpToLEL = 0
            ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                UpToLEL = LEL
            Else
                If TotalGrosspay >= LEL Then
                    UpToLEL = LEL
                    FlagLELReached = 1
                Else
                    UpToLEL = 0
                End If
            End If
            
            ' Cater for Post2010 years with the ST and PT
            ' CCA10970 changes needed
            If yearvalue > 2010 Then
                'If ET_PT >= ST Then
                
                'If FlagSTReached = 1 Then
                '    LELToST = 0
                'ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                '    LELToST = ST
                'Else
                '    If TotalGrosspay > LEL And TotalGrosspay < ST Then
                '        LELToST = IIf(TotalGrossPrev > LEL, TotalGrosspay - TotalGrossPrev, TotalGrosspay - LEL)
                '    ElseIf TotalGrosspay >= ST Then
                '        LELToST = ST - LEL
                 '       FlagSTReached = 1
                 ''   Else
                 '       LELToST = 0
                 '   End If
               ' End If
               '
                'If FlagPTReached = 1 Then
                '    STToPT = 0
                'ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                '    STToPT = ET_PT
                'Else
                 '   If TotalGrosspay > ST And TotalGrosspay < ET_PT Then
                 '       STToPT = IIf(TotalGrossPrev > ST, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ST)
                '    ElseIf TotalGrosspay >= ET_PT Then
                '        STToPT = ET_PT - ST
                '        FlagPTReached = 1
                '    Else
                '        STToPT = 0
                '    End If
                'End If
                
                'Else 'deal with the CCA10970 changes
                
                If FlagSTReached = 1 Then
                    LELToPT = 0
                ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                    LELToPT = ET_PT
                Else
                    If TotalGrosspay > LEL And TotalGrosspay < ET_PT Then
                        LELToPT = IIf(TotalGrossPrev > LEL, TotalGrosspay - TotalGrossPrev, TotalGrosspay - LEL)
                    ElseIf TotalGrosspay >= ET_PT Then
                        LELToPT = ET_PT - LEL
                        FlagSTReached = 1
                    Else
                        LELToPT = 0
                    End If
                End If
                
                ' This makes no difference to the end result
                If FlagPTReached = 1 Then
                    PTToST = 0
                ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                    PTToST = ST
                Else
                    If TotalGrosspay > ET_PT And TotalGrosspay < ET_PT Then
                        PTToST = IIf(TotalGrossPrev > ET_PT, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ST)
                    ElseIf TotalGrosspay >= ET_PT Then
                        'STToPT = ST - ET_PT
                        STToPT = ET_PT - ST
                        FlagPTReached = 1
                    Else
                        PTToST = 0
                    End If
                End If
                
                'End If
                
            Else
                ' Earnings LEL to ET
                If FlagETReached = 1 Then
                    LELtoET = 0
                ElseIf TotalGrosspay > UEL And FlagUELReached = 1 Then
                    LELtoET = ET_PT - LEL
                Else
                    If TotalGrosspay > LEL And TotalGrosspay <= ET_PT Then
                        LELtoET = IIf(TotalGrossPrev > LEL, TotalGrosspay - TotalGrossPrev, TotalGrosspay - LEL)
                    ElseIf TotalGrosspay > ET_PT Then
                        LELtoET = IIf(TotalGrossPrev > LEL, ET_PT - TotalGrossPrev, ET_PT - LEL)
                        FlagETReached = 1
                    Else
                        LELtoET = 0
                    End If
                End If
            End If
            
            ' Earnings ET/PT to UAP
            'If ET_PT >= ST Then
            If FlagUAPReached = 1 Then
                ETtoUAP = 0
            ElseIf TotalGrosspay > UAP And FlagUAPReached = 1 Then
                ETtoUAP = IIf(TotalGrossPrev > ET_PT, UAP - TotalGrossPrev, UAP - ET_PT)
            Else
                If TotalGrosspay > ET_PT And TotalGrosspay <= UAP Then
                    ETtoUAP = IIf(TotalGrossPrev > ET_PT, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ET_PT)
                ElseIf TotalGrosspay > UAP Then
                    ETtoUAP = IIf(TotalGrossPrev > ET_PT, UAP - TotalGrossPrev, UAP - ET_PT)
                    FlagUAPReached = 1
                Else
                    ETtoUAP = 0
                End If
            End If
            
            'Else
            ' ST to UAP
           ' If FlagUAPReached = 1 Then
            '    STToUAP = 0
           ' ElseIf TotalGrosspay > UAP And FlagUAPReached = 1 Then
           '     STToUAP = IIf(TotalGrossPrev > ST, UAP - TotalGrossPrev, UAP - ST)
           ' Else
            '    If TotalGrosspay > ST And TotalGrosspay <= UAP Then
            '        STToUAP = IIf(TotalGrossPrev > ST, TotalGrosspay - TotalGrossPrev, TotalGrosspay - ST)
            '    ElseIf TotalGrosspay > UAP Then
            '        STToUAP = IIf(TotalGrossPrev > ST, UAP - TotalGrossPrev, UAP - ST)
            '        FlagUAPReached = 1
            '    Else
            '        STToUAP = 0
            '    End If
            'End If
           ' End If
            
            ' Earnings UAP to UEL
            If FlagUSTReached = 1 Then
                UAPToUST = 0
            ElseIf TotalGrosspay > UST And FlagUELReached = 1 Then
                UAPToUEL = IIf(TotalGrossPrev > UAP, UEL - TotalGrossPrev, UEL - UAP)
            Else
                If TotalGrosspay > UAP And TotalGrosspay <= UEL Then
                    UAPToUEL = IIf(TotalGrossPrev > UAP, TotalGrosspay - TotalGrossPrev, TotalGrosspay - UAP)
                ElseIf TotalGrosspay > UEL Then
                    UAPToUEL = IIf(TotalGrossPrev > UAP, UEL - TotalGrossPrev, UEL - UAP)
                    FlagUELReached = 1
                Else
                    UAPToUEL = 0
                End If
            End If
            
            
            ' Earnings UAP to UST
            If FlagUSTReached = 1 Then
                UAPToUST = 0
            ElseIf TotalGrosspay > UST And FlagUSTReached = 1 Then
                UAPToUST = IIf(TotalGrossPrev > UAP, UST - TotalGrossPrev, UST - UAP)
            Else
                If TotalGrosspay > UAP And TotalGrosspay <= UST Then
                    UAPToUST = IIf(TotalGrossPrev > UAP, TotalGrosspay - TotalGrossPrev, TotalGrosspay - UAP)
                ElseIf TotalGrosspay > UST Then
                    UAPToUST = IIf(TotalGrossPrev > UAP, UST - TotalGrossPrev, UST - UAP)
                    FlagUSTReached = 1
                Else
                    UAPToUST = 0
                End If
            End If
            
                
            ' Earnings above UEL
            If TotalGrosspay > UEL Then
                AboveUEL = IIf(TotalGrossPrev > UEL, TotalGrosspay - TotalGrossPrev, TotalGrosspay - UEL)
                'FlagUELAbove = 1
            Else
                AboveUEL = 0
            End If

            
            ' Determine and update the earnings levels on the table
            DataTable.Edit
            With DataTable
            
                ![UpToLEL] = UpToLEL
                
                If yearvalue > 2010 Then
                   ' If ET_PT >= ST Then 'CCA10970
                    '    ![LELtoET] = LELToST + STToPT
                    'Else
                        ![LELToPT] = LELToPT + PTToST
                    'End If
                Else
                    ![LELtoET] = LELtoET
                End If
                'CSNE 20122011
                'alterations for CCA10970
                'if ET_PT >= ST then
                If Taxyear > 2014 Then
                ![LELtoET] = LELToPT
                End If
                'endif
                ![LELToST] = LELToST
                ![STToPT] = STToPT
                
                ![ETtoUAP] = ETtoUAP
                ![STToUAP] = STToUAP
                ![UAPToUEL] = UAPToUEL
                ![UAPToUST] = UAPToUST
                ![AboveUEL] = AboveUEL
    
                ![EENIRebate] = curRound(![LELtoET] * EERebateRate)
                'If ET_PT >= ST Then 'CCA10970
                ![EEConts] = (curRound(ETtoUAP * RateEE) + curRound(AboveUEL * UpperRateEE) + _
                                 curRound(UAPToUEL * UAPRateEE)) '- ![EENIRebate]
                'Else
                '    ![EEConts] = (curRound(STToUAP * RateEE) + curRound(AboveUEL * UpperRateEE) + _
                '                 curRound(UAPToUEL * UAPRateEE)) '- ![EENIRebate]
                'End If
                If yearvalue > 2010 Then
                    'If ET_PT >= ST Then 'CCA10970
                    'CCA10930 - CSNE
                    If yearvalue > 2014 And InStr("IK", sCategory) Then
                        ![ERNIRebate] = curRound((LELToPT) * ERRebateRate) + curRound(ETtoUAP * ERRebateRate)
                    Else
                        ![ERNIRebate] = curRound((LELToPT) * ERRebateRate)
                    End If
                    
                    If yearvalue > 2014 And InStr("MIKZ", sCategory) Then

                             ![ERConts] = (curRound(STToPT * RateER) + curRound(ETtoUAP * RateER) + curRound(UAPToUST * UAPRateER) + _
                            curRound(AboveUEL * UpperRateER))
                    Else
                            '![ERConts] = (curRound(STToPT * RateER) + curRound(ETtoUAP * RateER) + _
                            '      curRound(AboveUEL * UpperRateER) + curRound(UAPToUEL * UAPRateER)) '- ![ERNIRebate]
                            
                             ![ERConts] = (curRound(STToPT * RateER) + curRound(ETtoUAP * RateER) + _
                                  curRound(AboveUEL * UpperRateER) + curRound(UAPToUEL * UAPRateER)) '- ![ERNIRebate]
                    End If
                    'Else
                    'If yearvalue > 2014 And InStr("IK", sCategory) Then
                    '![ERNIRebate] = curRound(LELToPT * ERRebateRate) + curRound(STToUAP * ERRebateRate)
                    'Else
                    '![ERNIRebate] = curRound(LELToPT * ERRebateRate)
                    'End If
                     '   If yearvalue > 2014 And InStr("MIKZ", sCategory) Then
                     '       ![ERConts] = (curRound(PTToST * RateER) + curRound(STToUAP * RateER) + curRound(UAPToUST * UAPRateER) + _
                     '       curRound(AboveUEL * UpperRateER))
                     '   Else
                     '       ![ERConts] = (curRound(PTToST * RateER) + curRound(STToUAP * RateER) + _
                     '             curRound(AboveUEL * UpperRateER) + curRound(UAPToUEL * UAPRateER)) '- ![ERNIRebate]

                    
                    
                    'End If
                    'End If
                Else
                    ![ERNIRebate] = curRound(LELtoET * ERRebateRate)
                    
                    ![ERConts] = (curRound(ETtoUAP * RateER) + curRound(AboveUEL * UpperRateER) + _
                                  curRound(UAPToUEL * UAPRateER)) ' - ![ERNIRebate]
                End If
                
                ![TotalConts] = IIf(IsNull(![ERConts]), 0, (![ERConts])) + IIf(IsNull(![EEConts]), 0, (![EEConts]))

                ![LEL] = LEL
                
'                If yearvalue > 2010 Then
'                    ![ET_PT] = ST + ET_PT
'                Else
'                    ![ET_PT] = ET_PT
'                End If
                
                ![UAP] = UAP
                ![UEL] = UEL
                
                If ![EEConts] < ![EENIRebate] Then
                    Balance = ![EENIRebate] - ![EEConts]
                    ![EENIRebate] = ![EENIRebate] - Balance
                    ![ERNIRebate] = ![ERNIRebate] + Balance
                End If
                ![EEConts2009] = ![EEConts] - ![EENIRebate]
                ![ERConts2009] = ![ERConts] - ![ERNIRebate]
                ![TotalConts2009] = IIf(IsNull(![ERConts2009]), 0, (![ERConts2009])) + IIf(IsNull(![EEConts2009]), 0, (![EEConts2009]))
                                ![RateEE] = RateEE
                
                
                ![RateER] = RateER
                ![UAPRateEE] = UAPRateEE
                ![UAPRateER] = UAPRateER
                ![UpperRateEE] = UpperRateEE
                ![UpperRateER] = UpperRateER
                ![EERebateRate] = EERebateRate
                ![ERRebateRate] = ERRebateRate
                ![ERToST] = ERToST ' why is this here?
                .Update
            End With
       
           'Copy to record at the bottom of the table
            With DataTableClone
                .AddNew
                
                ![Category] = DataTable![Category] & "."
                ![Gross Pay] = DataTable![Gross Pay]
                
                ![UpToLEL] = DataTable![UpToLEL]
                ![LELToST] = DataTable![LELToST]
                ![LELToPT] = DataTable![LELToPT]
                ![STToPT] = DataTable![STToPT]
                '![PTToST] = DataTable![PTToST]
                ![LELtoET] = DataTable![LELtoET]
                ![ETtoUAP] = DataTable![ETtoUAP]
                If Taxyear > 2010 Then
                ![LELtoET] = DataTable![LELToPT]
                End If
                '![ETtoUAP] = DataTable![STToUAP]
                '![STToUAP] = DataTable![STToUAP]
                ![UAPToUST] = DataTable![UAPToUST]
                ![UAPToUEL] = DataTable![UAPToUEL]
                ![EEConts] = DataTable![EEConts]
                ![AboveUEL] = DataTable![AboveUEL]
                ![ERConts] = DataTable![ERConts]
                ![TotalConts] = DataTable![TotalConts]
                ![EENIRebate] = DataTable![EENIRebate]
                ![ERNIRebate] = DataTable![ERNIRebate]
                ![EEConts2009] = DataTable![EEConts2009]
                ![ERConts2009] = DataTable![ERConts2009]
                ![TotalConts2009] = DataTable![TotalConts2009]
                
                ![ERToST] = DataTable![ERToST] ' what does this do!!
                ![RateEE] = DataTable![RateEE]
                ![RateER] = DataTable![RateER]
                ![UAPRateEE] = DataTable![UAPRateEE]
                ![UAPRateER] = DataTable![UAPRateER]
                ![UpperRateEE] = DataTable![UpperRateEE]
                ![UpperRateER] = DataTable![UpperRateER]
                ![EERebateRate] = DataTable![EERebateRate]
                ![ERRebateRate] = DataTable![ERRebateRate]
                
                .Update
            End With
             
            TotalGrossPrev = TotalGrosspay
             
            ' Remove the original record
            DataTable.Delete
            DataTable.FindNext Criterion
         
        Loop   'Datatable.NoMatch
    Next

    ' Close both references.
    DataTableClone.Close
    DataTable.Close
    DB.Close
    
    DoCmd.RunSQL "update tblDirectorsContributions09 set category = left([category],1)" 'remove full stop
    
    ' Update subform
    
    Forms(myForm.Name).Recalc
    If Taxyear < 2003 Then
        calcDirectorsTotals01
        
    ElseIf Taxyear > 2008 Then
        calcDirectorsTotals09
    Else
        calcDirectorsTotals03
    End If
    
Exit_directorCalc09:
    DoCmd.Hourglass False
    
    Exit Sub

Err_directorCalc09:
    
    MsgBox Error$ & " in directorCalc09"
    Resume Exit_directorCalc09


End Sub



Sub directorCalc1999()
' Author            : Christopher Schuler
' Date              : 29 July 1999
' Purpose           : To calculate the Directors contributions from 1999

' Author        : Christopher Schuler
' Date          : 27 January 2004
' Purpose       : v1279407 Correct error when same category is used more than once in same year

' Name : Ben Stephenson
' Date : 13/09/2011
' Tag  : BSTE_20110913
' Desc : EARS000173309564 - Where APP is present, cats G and E should take priority over cat B
    
    ' nYear            : Tax Year
    ' bAPP             : Appropriate Personal Pension option, true/false
    ' bAnnualEarnings  : Earnings period annual(true)/weekly(false)
    ' nNumberOfWeeks   : Number of pro-rata weeks
    Dim nYear As Integer, bAPP  As Integer, bAnnualEarnings As Integer, nNumberOfWeeks As Integer
    ' sCategory     : Current record's category
    ' sGatheringCat : gathering categories order
    Dim sCategory  As String, sGatheringCat As String
    ' sCatOrder : Order in which details used in contributions, determined by category
    ' nPosition : Position in category order string
    ' Criterion : Condition used to limit the search to specified category
    Dim sCatOrder As String, nposition As Integer, Criterion As String
    Dim yearvalue
    
    Dim LEL As Currency         'Lower Earnings Limit
    Dim ET As Currency          'Earnings Threshold
    Dim UEL As Currency         'Upper Earnings Limit
    Dim RateEE                  'Employee rate of NI contributions
    Dim RateER                  'Employer rate of NI contributions
    Dim UpperRateER             'Employer higher rate of NI contributions
    Dim RebateRate              'Employer rate of rebate of NI contributions
    Dim i As Integer            'Record Counter
    
    ReDim gpay(10) As Currency   'Gross Pay for each Category
    Dim totalgross As Currency   'Cumulative Gross Pay
    Dim UpToLEL As Currency      'Amount of earnings for each category up to and including LEL
    Dim LELtoET As Currency      'Amount of earnings for each category above LEL, up to and including ET
    Dim ETtoUEL As Currency      'Amount of earnings for each category above ET, up to and including UEL
    Dim AboveUEL As Currency     'Amount of earnings for each category above UEL
    Dim FlagUptoLEL As Integer   'Flags when LEL has been reached
    Dim FlagLELToET As Integer   'Flags when ET has been reached
    Dim FlagETtoUEL As Integer   'Flags when UEL has been reached
    
    Dim totalgrossprevious As Currency      'The sum of Gross pays prior to the currrent run through the loop


    On Error GoTo Err_directorCalc1999
    
    
    DoCmd.Hourglass True


    Dim DB As Database
    Dim DataTable As DAO.Recordset
    Dim DataTableClone As DAO.Recordset
    

    If TaxYearCatCombinationInvalid() Then
       GoTo Exit_directorCalc1999
    End If
    
    ' Check to see if Tax, App and Period set
    If bSettingsCorrect() = False Then
        Exit Sub
    End If
    
    ' Tax Yr
    nYear = Forms![frmDirectorsMain]![cboTaxYear]
    
    ' APP option
    bAPP = Forms![frmDirectorsMain].[optAPP]

    ' Earnings period
    bAnnualEarnings = Forms![frmDirectorsMain]![optEarningsPeriod]

    ' Number of pro-rata weeks
    nNumberOfWeeks = nGetNumberOfProRataWeeks(Forms![frmDirectorsMain])
    
    
' Convert the year into a number representation.
yearvalue = Val(Forms!frmDirectorsMain.cboTaxYear)



' Use the index to locate the year.
NIRateBandTable.Index = "PrimaryKey"
NIRateBandTable.Seek "=", yearvalue
          
        If bAnnualEarnings > 1 Then
                'pro-rata limits
            LEL = NIRateBandTable![WkLEL] * nNumberOfWeeks
            ET = NIRateBandTable![AnnER_ET] * nNumberOfWeeks / 52
             
             'ET must be rounded up to next whole pound for pro-rata calcs.
            If ET > Int(ET) Then
                ET = Int(ET) + 1
            End If
            
            UEL = NIRateBandTable![WkUEL] * nNumberOfWeeks
        
        Else
            
            LEL = NIRateBandTable![AnnLEL]
            ET = NIRateBandTable![AnnER_ET]
            UEL = NIRateBandTable![AnnUEL]
        End If

  'set details on form
Forms!frmDirectorsMain.txtLELorEE_ET = LEL
Forms!frmDirectorsMain.txtLELorETorER_ET = ET
Forms!frmDirectorsMain.txtUEL = UEL
    
    If bAPP = cNoAPP Then
        sCatOrder = "GEBFDASC"
    Else
       'sCatOrder = "BGEAFDSC"   'BSTE_20110913
       sCatOrder = "GEBAFSDC"   'BSTE_20110913
    End If
    
    Set DB = CurrentDb()
    
    Set DataTable = DB.OpenRecordset("Select * from [tblDirectorsContributions]")
   
    Set DataTableClone = DataTable.Clone()
    
    
    ' Check year set
    If IsNull(Forms!frmDirectorsMain.cboTaxYear) Or Forms!frmDirectorsMain.cboTaxYear = "" Then
        
            MsgBox "Tax Year Not set.", 48, "Information"
            ' Close both references.
            DataTableClone.Close
            DataTable.Close
            DB.Close

            'directorCalc1999 = False
            GoTo Exit_directorCalc1999
    
    End If

    
    ' If no records at all, then quit.
    If DataTable.BOF And DataTable.EOF Then
        
            MsgBox "No entries in table.", 48, "Information"
            ' Close both references.
            DataTableClone.Close
            DataTable.Close
            DB.Close

            GoTo Exit_directorCalc1999
    
    End If
    
    ' Loop around each category, in order specified
    For nposition = 1 To 8

            ' Loop around selected category
           
        
                sGatheringCat = Mid$(sCatOrder, nposition, 1)
                Criterion = "Category = '" + sGatheringCat + "'"
                     '''
                DataTable.FindFirst Criterion
           
                   'If Datatable.NoMatch < 0 Then
                  '              GoTo endbit
                  ' End If
                


                sCategory = sGatheringCat

                Class1RateTable.Index = "PrimaryKey"
                Class1RateTable.Seek "=", yearvalue, sCategory
                
                ' If the year is not found.
                If Class1RateTable.NoMatch Then
                
                    Exit Sub
                
                Else
                    'EmployeeRate, EmployerRates
                    RateEE = Class1RateTable![EE_Rate]
                    RateER = Class1RateTable![ER_Rate]
                    UpperRateER = Class1RateTable![ER_AboveUEL]
                    RebateRate = Class1RateTable![ER NIC Rebate]
                End If
               
            Do Until DataTable.NoMatch   '#############
    
                DataTable.Edit              '###############
               
               'To calculate the total of gross pay at each pass through

                       'Record counter
                    i = i + 1
                    
                    gpay(i) = DataTable![Gross Pay]
                    
                   
                   totalgross = totalgross + gpay(i)
                    

              'To calculate the amount of gross pay upto and including the lower earnings limit
                If FlagUptoLEL = 1 Then
                    
                    UpToLEL = 0
               
                Else
                        
                        If gpay(i) >= LEL Or totalgross >= LEL Then
                             UpToLEL = LEL
                             FlagUptoLEL = 1
                        Else
                             UpToLEL = 0
                        End If
                 End If

                 'To calculate the amount of gross pay above lower earnings limit upto and including the earnings threshold
                If FlagLELToET = 1 Then
                    
                    LELtoET = 0
               
                Else
                        If totalgross > LEL And totalgross <= ET Then
                             LELtoET = IIf(totalgrossprevious > LEL, totalgross - totalgrossprevious, totalgross - LEL)
                             
                        ElseIf totalgross > ET Then
                            LELtoET = IIf(totalgrossprevious > LEL, ET - totalgrossprevious, ET - LEL)
                            FlagLELToET = 1
                        Else
                             LELtoET = 0
                        End If
                 End If

                 'To calculate the amount of gross pay above earnings threshold upto and including the upper earnings limit
                If FlagETtoUEL = 1 Then
                    
                    ETtoUEL = 0
               
                Else
                        If totalgross > ET And totalgross <= UEL Then
                             ETtoUEL = IIf(totalgrossprevious > ET, totalgross - totalgrossprevious, totalgross - ET)
                             
                        ElseIf totalgross > UEL Then
                            ETtoUEL = IIf(totalgrossprevious > ET, UEL - totalgrossprevious, UEL - ET)
                            FlagETtoUEL = 1
                        Else
                             ETtoUEL = 0
                        End If
                 End If

                'To calculate the amount of gross pay above the upper earnings limit
                If totalgross > UEL Then
                       
                    AboveUEL = IIf(totalgrossprevious > UEL, totalgross - totalgrossprevious, totalgross - UEL)
                
                Else
                    
                    AboveUEL = 0
                
                End If
                 


                 totalgrossprevious = totalgross

                   ' Update table entries
            With DataTable
                .Edit
                
                ![UpToLEL] = UpToLEL
                ![LELtoET] = LELtoET
                ![ETtoUEL] = ETtoUEL
                ![AboveUEL] = AboveUEL
                ![EEConts] = curRound((LELtoET + ETtoUEL) * RateEE)
                ![ERConts] = curRound((ETtoUEL * RateER) + (AboveUEL * UpperRateER))
                ![TotalConts] = IIf(IsNull(![ERConts]), 0, (![ERConts])) + IIf(IsNull(![EEConts]), 0, (![EEConts]))
                ![NIRebate] = curRound(LELtoET * RebateRate)
                ![LEL] = LEL
                ![ET] = ET
                ![UEL] = UEL
                ![RateEE] = RateEE
                ![RateER] = RateER
                ![UpperRateER] = UpperRateER
                ![RebateRate] = RebateRate
                
                .Update
            End With
            ' Copy to record at the bottom of the table
            With DataTableClone
                .AddNew
                
                ![Category] = DataTable![Category] & "."        '####################
                ![Gross Pay] = DataTable![Gross Pay]
           
                ![UpToLEL] = DataTable![UpToLEL]
                ![LELtoET] = DataTable![LELtoET]
                ![ETtoUEL] = DataTable![ETtoUEL]
                ![EEConts] = DataTable![EEConts]
                ![AboveUEL] = DataTable![AboveUEL]
                ![ERConts] = DataTable![ERConts]
                ![TotalConts] = DataTable![TotalConts]
                ![NIRebate] = DataTable![NIRebate]
                ![LEL] = DataTable![LEL]
                ![ET] = DataTable![ET]
                ![UEL] = DataTable![UEL]
                ![RateEE] = DataTable![RateEE]
                ![RateER] = DataTable![RateER]
                ![UpperRateER] = DataTable![UpperRateER]
                ![RebateRate] = DataTable![RebateRate]

                .Update
            End With
            ' Remove the original record
            DataTable.Delete
            DataTable.FindNext Criterion
         
'endbit:
    
        Loop
        
    Next
    
    
    
    ' Close both references.
    DataTableClone.Close
    DataTable.Close
    DB.Close
    
    
    DoCmd.RunSQL "update tblDirectorsContributions set category = left([category],1)" 'remove full stop
   
    
    ' Update subform
    Forms!frmDirectorsMain.Recalc
    calcDirectorsTotals


Exit_directorCalc1999:
    DoCmd.Hourglass False
    
    Exit Sub

Err_directorCalc1999:
    DoCmd.Hourglass False
    MsgBox Error$
    Resume Exit_directorCalc1999


End Sub

Sub directorCalc2000(Taxyear As Integer, myForm As Form)
' Author    : Christopher Schuler
' Date      : 12 November 1999
' Purpose   : To calculate the Directors contributions from 2000

' Author    : Christopher Schuler
' Date      : 27 January 2004
' Purpose   : v1279407 Re-write to correct error when same category is used more than once in same year

' Author    :Chris Schuler
' Date      :6 October 2004
' Purpose   :CCA8292 - Make year 2000 form the same as 2001 and 2002

' Author    : Christopher schuler
' Date      : 4 May 2005
' Purpose   : V1876922 - correction to NIC rebate calc when EE conts are less than EE NIC rebate

' Name : Ben Stephenson
' Date : 13/09/2011
' Tag  : BSTE_20110913
' Desc : EARS000173309564 - Where APP is present, cats G and E should take priority over cat B

    
    ' nYear            : Tax Year
    ' bAPP             : Appropriate Personal Pension option, true/false
    ' bAnnualEarnings  : Earnings period annual(true)/weekly(false)
    ' nNumberOfWeeks   : Number of pro-rata weeks
    Dim nYear As Integer, bAPP  As Integer, bAnnualEarnings As Integer, nNumberOfWeeks As Integer
    ' sCategory     : Current record's category
    ' sGatheringCat : gathering categories order
    Dim sCategory  As String, sGatheringCat As String
    ' sCatOrder : Order in which details used in contributions, determined by category
    ' nPosition : Position in category order string
    ' Criterion : Condition used to limit the search to specified category
    Dim sCatOrder As String, nposition As Integer, Criterion As String
    Dim yearvalue
    
    Dim LEL As Currency         'Lower Earnings Limit
    Dim EE_ET As Currency          'Employee Earnings Threshold
    Dim ER_ET As Currency          'Employer Earnings Threshold
    Dim UEL As Currency         'Upper Earnings Limit
    Dim RateEE                  'Employee rate of NI contributions
    Dim RateER                  'Employer rate of NI contributions
    Dim UpperRateER             'Employer higher rate of NI contributions
    Dim EERebateRate              'Employee rate of rebate of NI contributions
    Dim ERRebateRate              'Employer rate of rebate of NI contributions
    Dim i As Integer            'Counter for each record/category
    
    ReDim gpay(10) As Currency   'Gross Pay for each Category
    Dim totalgross As Currency   'Cumulative Gross Pay
    Dim UpToLEL As Currency      'Amount of earnings for each category up to and including LEL
    Dim LELToEE_ET As Currency      'Amount of earnings for each category above LEL, up to and including EE_ET
    Dim EE_ETToER_ET As Currency      'Amount of earnings for each category above EE_ET, up to and including ER_ET
    Dim ER_ETToUEL As Currency      'Amount of earnings for each category above ET, up to and including UEL
    Dim AboveUEL As Currency     'Amount of earnings for each category above UEL
   
    Dim FlagUptoLEL As Integer   'Flags when LEL has been reached
    Dim FlagLELToEE_ET As Integer   'Flags when EE_ET has been reached
    Dim FlagEE_ETtoER_ET As Integer   'Flags when ER_ET has been reached
    Dim FlagER_ETtoUEL As Integer   'Flags when UEL has been reached
    
    Dim totalgrossprevious As Currency      'The sum of Gross pays prior to the current run through the loop
    Dim npos As Integer               'This takes over from nposition as the position in the category order string once UEL has been reached
    Dim FlagUELReached As Integer          'The flag for multiple categories where the UEL has been reached
    
    On Error GoTo Err_directorCalc2000
    
    
    DoCmd.Hourglass True


    Dim DB As Database
    Dim DataTable As DAO.Recordset
    Dim DataTableClone As DAO.Recordset
    
  

    'If TaxYearCatCombinationInvalid() Then
   '    GoTo Exit_directorCalc2000
   ' End If
    
    ' Check to see if Tax, App and Period set
    If bSettingsCorrect01(myForm) = False Then
        Exit Sub
    End If
    
    ' Tax Yr
    nYear = Forms![frmDirectorsMain2001]![cboTaxYear]
    
    ' APP option
    bAPP = Forms![frmDirectorsMain2001].[optAPP]

    ' Earnings period
    bAnnualEarnings = Forms![frmDirectorsMain2001]![optEarningsPeriod]

    ' Number of pro-rata weeks
    nNumberOfWeeks = nGetNumberOfProRataWeeks(Forms![frmDirectorsMain2001])
    
    
' Convert the year into a number representation.
yearvalue = Val(Forms!frmDirectorsMain2001.cboTaxYear)



' Use the index to locate the year.
NIRateBandTable.Index = "PrimaryKey"
NIRateBandTable.Seek "=", yearvalue
          
        If bAnnualEarnings > 0 Then
                'pro-rata limits
            LEL = NIRateBandTable![WkLEL] * nNumberOfWeeks
            
            EE_ET = NIRateBandTable![AnnEE_ET] * nNumberOfWeeks / 52
             
             'ETs must be rounded up to next whole pound for pro-rata calcs.
            If EE_ET > Int(EE_ET) Then
                EE_ET = Int(EE_ET) + 1
            End If
            
            ER_ET = NIRateBandTable![AnnER_ET] * nNumberOfWeeks / 52

            If ER_ET > Int(ER_ET) Then
                ER_ET = Int(ER_ET) + 1
            End If

            UEL = NIRateBandTable![WkUEL] * nNumberOfWeeks
        
        Else
            
            LEL = NIRateBandTable![AnnLEL]
            EE_ET = NIRateBandTable![AnnEE_ET]
            ER_ET = NIRateBandTable![AnnER_ET]
            UEL = NIRateBandTable![AnnUEL]

        End If

  'set details on form
Forms!frmDirectorsMain2001.txtLEL = LEL
Forms!frmDirectorsMain2001.txtLELorEE_ET = EE_ET
Forms!frmDirectorsMain2001.txtLELorETorER_ET = ER_ET
Forms!frmDirectorsMain2001.txtUEL = UEL
    
        'Set the category order of processing
    If bAPP = cNoAPP Then
        sCatOrder = "GEBFDASC"
    Else
        'sCatOrder = "BGEAFDSC"   'BSTE_20110913
        sCatOrder = "GEBAFDSC"   'BSTE_20110913
    End If
    
    Set DB = CurrentDb()
    
    Set DataTable = DB.OpenRecordset("Select * from [tblDirectorsContributions2000]")
   
    Set DataTableClone = DataTable.Clone()
    
    
    ' Check year set
    If IsNull(Forms!frmDirectorsMain2001.cboTaxYear) Or Forms!frmDirectorsMain2001.cboTaxYear = "" Then
        
            MsgBox "Tax Year Not set.", 48, "Information"
            ' Close both references.
            DataTableClone.Close
            DataTable.Close
            DB.Close

            'directorCalc2000 = False
            GoTo Exit_directorCalc2000
    
    End If

    
    ' If no records at all, then quit.
    If DataTable.BOF And DataTable.EOF Then
        
            MsgBox "No entries in table.", 48, "Information"
            ' Close both references.
            DataTableClone.Close
            DataTable.Close
            DB.Close

            GoTo Exit_directorCalc2000
    
    End If


    ' Loop around each category, in order specified
For nposition = 1 To 8

            ' Loop around selected category
           
    sGatheringCat = Mid$(sCatOrder, nposition, 1)
    Criterion = "Category = '" + sGatheringCat + "'"
                    
    DataTable.FindFirst Criterion
                   
        Do Until DataTable.NoMatch
    
            DataTable.Edit

            sCategory = sGatheringCat

            Class1RateTable.Index = "PrimaryKey"
            Class1RateTable.Seek "=", yearvalue, sCategory
                
                ' If the year is not found.
            If Class1RateTable.NoMatch Then
                
                Exit Sub
                
            Else
                    'EmployeeRate, EmployerRates
                RateEE = Class1RateTable![EE_Rate]
                RateER = Class1RateTable![ER_Rate]
                UpperRateER = Class1RateTable![ER_AboveUEL]
                EERebateRate = Class1RateTable![EE NIC Rebate]
                ERRebateRate = Class1RateTable![ER NIC Rebate]
                
            End If
               'To calculate the total of gross pay at each pass through when UEL not reached

                       'Record counter
            i = i + 1
                    
            gpay(i) = DataTable![Gross Pay]
                   
            If FlagUELReached <> 1 Then
                totalgross = totalgross + gpay(i)
            End If

                'To calculate the amount of gross pay upto and including the lower earnings limit
            If FlagUptoLEL = 1 Then
                    
                UpToLEL = 0
                    'FlagUptoLEL = 1

            ElseIf totalgross > UEL And FlagUELReached = 1 Then

                UpToLEL = LEL

            Else
                        
                If totalgross >= LEL Then
                    UpToLEL = LEL
                    FlagUptoLEL = 1
                Else
                    UpToLEL = 0
                End If
            End If

                 'To calculate the amount of gross pay above lower earnings limit upto and including the employee earnings threshold
            If FlagLELToEE_ET = 1 Then
                    
                LELToEE_ET = 0

            ElseIf totalgross > UEL And FlagUELReached = 1 Then

                LELToEE_ET = EE_ET - LEL
                
            Else
                
                If totalgross > LEL And totalgross <= EE_ET Then
                    
                    LELToEE_ET = IIf(totalgrossprevious > LEL, totalgross - totalgrossprevious, totalgross - LEL)
                             
                ElseIf totalgross > EE_ET Then
                            
                    LELToEE_ET = IIf(totalgrossprevious > LEL, EE_ET - totalgrossprevious, EE_ET - LEL)
                    FlagLELToEE_ET = 1
                
                Else
                    
                    LELToEE_ET = 0
                
                End If
            
            End If

                 'To calculate the amount of gross pay above employee earnings threshold upto and including the employers earnings threshold
            If FlagEE_ETtoER_ET = 1 Then
                    
                EE_ETToER_ET = 0
                    

            ElseIf totalgross > UEL And FlagUELReached = 1 Then

                EE_ETToER_ET = ER_ET - EE_ET
               
            Else
                
                If totalgross > EE_ET And totalgross <= ER_ET Then
                             
                    EE_ETToER_ET = IIf(totalgrossprevious > EE_ET, totalgross - totalgrossprevious, totalgross - EE_ET)
                             
                ElseIf totalgross > ER_ET Then
                            
                    EE_ETToER_ET = IIf(totalgrossprevious > EE_ET, ER_ET - totalgrossprevious, ER_ET - EE_ET)
                    FlagEE_ETtoER_ET = 1
                        
                Else
                             
                    EE_ETToER_ET = 0
                        
                End If
                 
            End If


                 'To calculate the amount of gross pay above employer earnings threshold upto and including the upper earnings limit
            If FlagER_ETtoUEL = 1 Then
                    
                ER_ETToUEL = 0
                    

            ElseIf totalgross > UEL And FlagUELReached = 1 Then

                ER_ETToUEL = IIf(totalgrossprevious > ER_ET, UEL - totalgrossprevious, UEL - ER_ET)
                
            Else
                
                If totalgross > ER_ET And totalgross <= UEL Then
                    
                    ER_ETToUEL = IIf(totalgrossprevious > ER_ET, totalgross - totalgrossprevious, totalgross - ER_ET)
                             
                ElseIf totalgross > UEL Then
                    
                    ER_ETToUEL = IIf(totalgrossprevious > ER_ET, UEL - totalgrossprevious, UEL - ER_ET)
                    FlagER_ETtoUEL = 1
                Else
                    
                    ER_ETToUEL = 0
                
                End If
            
            End If

                'To calculate the amount of gross pay above the upper earnings limit
            If totalgross > UEL Then
                       
                AboveUEL = IIf(totalgrossprevious > UEL, totalgross - totalgrossprevious, totalgross - UEL)
                
            Else
                    
                AboveUEL = 0
                
            End If
                       
            totalgrossprevious = totalgross

                   ' Update table entries
            With DataTable
            .Edit
                
                
                ![UpToLEL] = UpToLEL
                ![LELToEE_ET] = LELToEE_ET
                ![EE_ETToER_ET] = EE_ETToER_ET
                ![ER_ETToUEL] = ER_ETToUEL
                ![AboveUEL] = AboveUEL
                ![EEConts] = curRound((EE_ETToER_ET + ER_ETToUEL) * RateEE)
                ![ERConts] = curRound((ER_ETToUEL * RateER) + (AboveUEL * UpperRateER))
                ![TotalConts] = IIf(IsNull(![ERConts]), 0, (![ERConts])) + IIf(IsNull(![EEConts]), 0, (![EEConts]))
                ![EENIRebate] = curRound(LELToEE_ET * EERebateRate)
                ![ERNIRebate] = curRound((LELToEE_ET + EE_ETToER_ET) * ERRebateRate)
                If ![EEConts] <= ![EENIRebate] Then
                    ![ERNIRebate] = ![ERNIRebate] + ![EENIRebate] - ![EEConts]
                    ![EENIRebate] = ![EEConts]
                End If
                If ![EEConts] = 0 Then
                    ![ERNIRebate] = ![ERNIRebate] + ![EENIRebate]
                End If
                ![LEL] = LEL
                ![EE_ET] = EE_ET
                ![ER_ET] = ER_ET
                ![UEL] = UEL
                ![RateEE] = RateEE
                ![RateER] = RateER
                ![UpperRateER] = UpperRateER
                ![EERebateRate] = EERebateRate
                ![ERRebateRate] = ERRebateRate
            .Update
            End With

           

             'Copy to record at the bottom of the table
             With DataTableClone
                .AddNew
                
                ![Category] = DataTable![Category] & "."
                ![Gross Pay] = DataTable![Gross Pay]
           
                ![UpToLEL] = DataTable![UpToLEL]
                ![LELToEE_ET] = DataTable![LELToEE_ET]
                ![EE_ETToER_ET] = DataTable![EE_ETToER_ET]
                ![ER_ETToUEL] = DataTable![ER_ETToUEL]
                ![EEConts] = DataTable![EEConts]
                ![AboveUEL] = DataTable![AboveUEL]
                ![ERConts] = DataTable![ERConts]
                ![TotalConts] = DataTable![TotalConts]
                ![EENIRebate] = DataTable![EENIRebate]
                ![ERNIRebate] = DataTable![ERNIRebate]
                ![LEL] = DataTable![LEL]
                ![EE_ET] = DataTable![EE_ET]
                ![ER_ET] = DataTable![ER_ET]
                ![UEL] = DataTable![UEL]
                ![RateEE] = DataTable![RateEE]
                ![RateER] = DataTable![RateER]
                ![UpperRateER] = DataTable![UpperRateER]
                ![EERebateRate] = DataTable![EERebateRate]
                ![ERRebateRate] = DataTable![ERRebateRate]

                .Update
            End With
            ' Remove the original record
            DataTable.Delete

            DataTable.FindNext Criterion
         
        Loop   'Datatable.NoMatch

Next     'nposition

    ' Close both references.
    DataTableClone.Close
    DataTable.Close
    DB.Close
    
    DoCmd.RunSQL "update tblDirectorsContributions2000 set category = left([category],1)" 'remove full stop
    
    
    ' Update subform
    Forms!frmDirectorsMain2001.Recalc
    calcDirectorsTotals01


Exit_directorCalc2000:
    DoCmd.Hourglass False
    
    Exit Sub

Err_directorCalc2000:
    DoCmd.Hourglass False
    MsgBox Error$
    Resume Exit_directorCalc2000



End Sub

Sub GetTotalGrossPayed(mySet As DAO.Recordset, nTotalGross As Currency)
' Author        : Mustaq Hussain
' Date          : 14 June 1995
' Fuction Name  : GetTotalGrossPayed
' Purpose       : Cycle through all details to determine gross pay

    nTotalGross = 0

    mySet.MoveLast
    
    ' Check if one one contract
    If mySet.Recordcount = 1 Then
        
        nTotalGross = mySet![Gross Pay]

    Else
        ' More than one detail entered

        mySet.MoveFirst
        Do Until mySet.EOF

            nTotalGross = nTotalGross + mySet![Gross Pay]
            
            mySet.MoveNext
        Loop

    End If

End Sub

Function nGetNumberOfProRataWeeks(myForm) As Integer
' Author        : Mustaq Hussain
' Date          : 12 June 1995
' Fuction Name  : nGetNumberOfProRataWeeks
' Purpose       : Get the number of pro rata weeks from start of directorship

    Dim nWeekNo As Integer, nMonth As Integer, nYear As Integer, nDay As Integer, bLeapYear As Integer

    Dim nNumberOfWeeks As Integer

    On Error GoTo Err_nGetNumberOfProRataWeeks

    nNumberOfWeeks = 0

    If IsNull(myForm![dtDirectorshipFrom]) Then
        nWeekNo = 1
    Else
        nMonth = Val(Format$(myForm!dtDirectorshipFrom, "mm"))
        nDay = Val(Format$(myForm!dtDirectorshipFrom, "dd"))
        nYear = myForm![cboTaxYear]
        bLeapYear = IIf(((nYear + 1) Mod 4) = 0, True, False)

        Select Case nMonth
            ' April
            Case 4
                Select Case nDay
                    Case 1 To 5
                        If bLeapYear = True Then
                            nWeekNo = IIf(nDay <= 3, 52, 53)
                        Else
                            nWeekNo = IIf(nDay <= 4, 52, 53)
                        End If
                    Case 6 To 12
                        nWeekNo = 1
                    Case 13 To 19
                        nWeekNo = 2
                    Case 20 To 26
                        nWeekNo = 3
                    Case Else
                        nWeekNo = 4
                End Select
            ' May
            Case 5
                Select Case nDay
                    Case 1 To 3
                        nWeekNo = 4
                    Case 4 To 10
                        nWeekNo = 5
                    Case 11 To 17
                        nWeekNo = 6
                    Case 18 To 24
                        nWeekNo = 7
                    Case Else
                        nWeekNo = 8
                End Select
            ' June
            Case 6
                Select Case nDay
                    Case 1 To 7
                        nWeekNo = 9
                    Case 8 To 14
                        nWeekNo = 10
                    Case 15 To 21
                        nWeekNo = 11
                    Case 22 To 28
                        nWeekNo = 12
                    Case Else
                        nWeekNo = 13
                End Select

            ' July
            Case 7
                Select Case nDay
                    Case 1 To 5
                        nWeekNo = 13
                    Case 6 To 12
                        nWeekNo = 14
                    Case 13 To 19
                        nWeekNo = 15
                    Case 20 To 26
                        nWeekNo = 16
                    Case Else
                        nWeekNo = 17
                End Select

            ' Aug
            Case 8
                Select Case nDay
                    Case 1 To 2
                        nWeekNo = 17
                    Case 3 To 9
                        nWeekNo = 18
                    Case 10 To 16
                        nWeekNo = 19
                    Case 17 To 23
                        nWeekNo = 20
                    Case 24 To 30
                        nWeekNo = 21
                    Case Else
                        nWeekNo = 22
                End Select

            ' Sep
            Case 9
                Select Case nDay
                    Case 1 To 6
                        nWeekNo = 22
                    Case 7 To 13
                        nWeekNo = 23
                    Case 14 To 20
                        nWeekNo = 24
                    Case 21 To 27
                        nWeekNo = 25
                    Case Else
                        nWeekNo = 26
                End Select

            ' Oct
            Case 10
                Select Case nDay
                    Case 1 To 4
                        nWeekNo = 26
                    Case 5 To 11
                        nWeekNo = 27
                    Case 12 To 18
                        nWeekNo = 28
                    Case 19 To 25
                        nWeekNo = 29
                    Case Else
                        nWeekNo = 30
                End Select

            ' Nov
            Case 11
                Select Case nDay
                    Case 1
                        nWeekNo = 30
                    Case 2 To 8
                        nWeekNo = 31
                    Case 9 To 15
                        nWeekNo = 32
                    Case 16 To 22
                        nWeekNo = 33
                    Case 23 To 29
                        nWeekNo = 34
                    Case Else
                        nWeekNo = 35
                End Select
            
            ' Dec
            Case 12
                Select Case nDay
                    Case 1 To 6
                        nWeekNo = 35
                    Case 7 To 13
                        nWeekNo = 36
                    Case 14 To 20
                        nWeekNo = 37
                    Case 21 To 27
                        nWeekNo = 38
                    Case Else
                        nWeekNo = 39
                End Select
            
            ' Jan
            Case 1
                Select Case nDay
                    Case 1 To 3
                        nWeekNo = 39
                    Case 4 To 10
                        nWeekNo = 40
                    Case 11 To 17
                        nWeekNo = 41
                    Case 18 To 24
                        nWeekNo = 42
                    Case Else
                        nWeekNo = 43
                End Select
            

            ' Feb
            Case 2
                Select Case nDay
                    Case 1 To 7
                        nWeekNo = 44
                    Case 8 To 14
                        nWeekNo = 45
                    Case 15 To 21
                        nWeekNo = 46
                    Case 22 To 28
                        nWeekNo = 47
                    Case Else
                        If bLeapYear = True Then
                            nWeekNo = 48
                        End If
                End Select
            
            ' Mar
            Case 3
                If bLeapYear = True Then
                    ' Leap year
                    Select Case nDay
                        Case 1 To 6
                            nWeekNo = 48
                        Case 7 To 13
                            nWeekNo = 49
                        Case 14 To 20
                            nWeekNo = 50
                        Case 21 To 27
                            nWeekNo = 51
                        Case Else
                            nWeekNo = 52
                    End Select
                
                Else
                    ' Non leap year
                    Select Case nDay
                        Case 1 To 7
                            nWeekNo = 48
                        Case 8 To 14
                            nWeekNo = 49
                        Case 15 To 21
                            nWeekNo = 50
                        Case 22 To 28
                            nWeekNo = 51
                        Case Else
                            nWeekNo = 52
                    End Select

                End If

        End Select

    End If

    nNumberOfWeeks = IIf(nYear >= 90, 52, 53) - (nWeekNo - 1)

    nGetNumberOfProRataWeeks = nNumberOfWeeks

Exit_nGetNumberOfProRataWeeks:
    Exit Function

Err_nGetNumberOfProRataWeeks:
    MsgBox Error$
    Resume Exit_nGetNumberOfProRataWeeks

End Function

Function nGetNumberOfProRataWeeks01(myForm As Form)
' Author        : Mustaq Hussain
' Date          : 12 June 1995
' Fuction Name  : nGetNumberOfProRataWeeks
' Purpose       : Get the number of pro rata weeks from start of directorship
' Author        : Peter Morton
' Date          : 05 Jan 2001
' Purpose       : Renamed and modified for 2001


    Dim nWeekNo As Integer, nMonth As Integer, nYear As Integer, nDay As Integer, bLeapYear As Integer

    Dim nNumberOfWeeks As Integer

    On Error GoTo Err_nGetNumberOfProRataWeeks01

    nNumberOfWeeks = 0

    If IsNull(Forms(myForm.Name)![dtDirectorshipFrom]) Then
        nWeekNo = 1
    Else
        nMonth = Val(Format$(Forms(myForm.Name)!dtDirectorshipFrom, "mm"))
        nDay = Val(Format$(Forms(myForm.Name)!dtDirectorshipFrom, "dd"))
        nYear = Forms(myForm.Name)![cboTaxYear]
        bLeapYear = IIf(((nYear + 1) Mod 4) = 0, True, False)

        Select Case nMonth
            ' April
            Case 4
                Select Case nDay
                    Case 1 To 5
                        If bLeapYear = True Then
                            nWeekNo = IIf(nDay <= 3, 52, 53)
                        Else
                            nWeekNo = IIf(nDay <= 4, 52, 53)
                        End If
                    Case 6 To 12
                        nWeekNo = 1
                    Case 13 To 19
                        nWeekNo = 2
                    Case 20 To 26
                        nWeekNo = 3
                    Case Else
                        nWeekNo = 4
                End Select
            ' May
            Case 5
                Select Case nDay
                    Case 1 To 3
                        nWeekNo = 4
                    Case 4 To 10
                        nWeekNo = 5
                    Case 11 To 17
                        nWeekNo = 6
                    Case 18 To 24
                        nWeekNo = 7
                    Case Else
                        nWeekNo = 8
                End Select
            ' June
            Case 6
                Select Case nDay
                    Case 1 To 7
                        nWeekNo = 9
                    Case 8 To 14
                        nWeekNo = 10
                    Case 15 To 21
                        nWeekNo = 11
                    Case 22 To 28
                        nWeekNo = 12
                    Case Else
                        nWeekNo = 13
                End Select

            ' July
            Case 7
                Select Case nDay
                    Case 1 To 5
                        nWeekNo = 13
                    Case 6 To 12
                        nWeekNo = 14
                    Case 13 To 19
                        nWeekNo = 15
                    Case 20 To 26
                        nWeekNo = 16
                    Case Else
                        nWeekNo = 17
                End Select

            ' Aug
            Case 8
                Select Case nDay
                    Case 1 To 2
                        nWeekNo = 17
                    Case 3 To 9
                        nWeekNo = 18
                    Case 10 To 16
                        nWeekNo = 19
                    Case 17 To 23
                        nWeekNo = 20
                    Case 24 To 30
                        nWeekNo = 21
                    Case Else
                        nWeekNo = 22
                End Select

            ' Sep
            Case 9
                Select Case nDay
                    Case 1 To 6
                        nWeekNo = 22
                    Case 7 To 13
                        nWeekNo = 23
                    Case 14 To 20
                        nWeekNo = 24
                    Case 21 To 27
                        nWeekNo = 25
                    Case Else
                        nWeekNo = 26
                End Select

            ' Oct
            Case 10
                Select Case nDay
                    Case 1 To 4
                        nWeekNo = 26
                    Case 5 To 11
                        nWeekNo = 27
                    Case 12 To 18
                        nWeekNo = 28
                    Case 19 To 25
                        nWeekNo = 29
                    Case Else
                        nWeekNo = 30
                End Select

            ' Nov
            Case 11
                Select Case nDay
                    Case 1
                        nWeekNo = 30
                    Case 2 To 8
                        nWeekNo = 31
                    Case 9 To 15
                        nWeekNo = 32
                    Case 16 To 22
                        nWeekNo = 33
                    Case 23 To 29
                        nWeekNo = 34
                    Case Else
                        nWeekNo = 35
                End Select
            
            ' Dec
            Case 12
                Select Case nDay
                    Case 1 To 6
                        nWeekNo = 35
                    Case 7 To 13
                        nWeekNo = 36
                    Case 14 To 20
                        nWeekNo = 37
                    Case 21 To 27
                        nWeekNo = 38
                    Case Else
                        nWeekNo = 39
                End Select
            
            ' Jan
            Case 1
                Select Case nDay
                    Case 1 To 3
                        nWeekNo = 39
                    Case 4 To 10
                        nWeekNo = 40
                    Case 11 To 17
                        nWeekNo = 41
                    Case 18 To 24
                        nWeekNo = 42
                    Case Else
                        nWeekNo = 43
                End Select
            

            ' Feb
            Case 2
                Select Case nDay
                    Case 1 To 7
                        nWeekNo = 44
                    Case 8 To 14
                        nWeekNo = 45
                    Case 15 To 21
                        nWeekNo = 46
                    Case 22 To 28
                        nWeekNo = 47
                    Case Else
                        If bLeapYear = True Then
                            nWeekNo = 48
                        End If
                End Select
            
            ' Mar
            Case 3
                If bLeapYear = True Then
                    ' Leap year
                    Select Case nDay
                        Case 1 To 6
                            nWeekNo = 48
                        Case 7 To 13
                            nWeekNo = 49
                        Case 14 To 20
                            nWeekNo = 50
                        Case 21 To 27
                            nWeekNo = 51
                        Case Else
                            nWeekNo = 52
                    End Select
                
                Else
                    ' Non leap year
                    Select Case nDay
                        Case 1 To 7
                            nWeekNo = 48
                        Case 8 To 14
                            nWeekNo = 49
                        Case 15 To 21
                            nWeekNo = 50
                        Case 22 To 28
                            nWeekNo = 51
                        Case Else
                            nWeekNo = 52
                    End Select

                End If

        End Select

    End If

    nNumberOfWeeks = IIf(nYear >= 90, 52, 53) - (nWeekNo - 1)

    nGetNumberOfProRataWeeks01 = nNumberOfWeeks

Exit_nGetNumberOfProRataWeeks01:
    Exit Function

Err_nGetNumberOfProRataWeeks01:
    MsgBox Error$
    Resume Exit_nGetNumberOfProRataWeeks01

End Function

Sub Pro_Rata_Band(ByVal nYear As Integer, ByVal nWeeks As Integer, ByVal nTotal_Earnings As Currency, nBand As Integer, txtLEL As Currency, txtUEL As Currency)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : Pro_Rata_Band
' Purpose       : To get the Band, LEL and UEL for the specified year, using the pro-rata period


    Dim myDB As Database, mySet As DAO.Recordset
    Dim sYear As String, SQLQuery As String

    On Error GoTo Err_Pro_Rata_Band

    ' Need to convert Tax Yr into a string, without a leading space
    sYear = Mid(Str(nYear), 2, 5)

    ' Query to get the Annual Bands for [Tax Yr]
    SQLQuery = "SELECT * FROM [BAND TABLE] WHERE [Tax Yr] = '" + sYear + "';"
    
    Set myDB = DBEngine.Workspaces(0).Databases(0)
    Set mySet = myDB.OpenRecordset(SQLQuery)
    

    ' Extract the Band and its Limit, for the earnings
    nBand = 0
    If nTotal_Earnings >= (mySet![Wk Band 1] * nWeeks) Then
        nBand = 1
        If nTotal_Earnings >= (mySet![Wk Band 2] * nWeeks) Then
            nBand = 2
            If nTotal_Earnings >= (mySet![Wk Band 3] * nWeeks) Then
                nBand = 3
                If nTotal_Earnings >= (mySet![Wk Band 4] * nWeeks) Then
                    nBand = 4
                End If
            End If
        End If
    End If

    ' Lower and Uppper Earnings Limits
    txtLEL = mySet![Wk Band 1] * nWeeks
    txtUEL = mySet![Wk Band 5] * nWeeks

Exit_Pro_Rata_Band:
    Exit Sub

Err_Pro_Rata_Band:
    MsgBox Error$
    Resume Exit_Pro_Rata_Band

End Sub

Sub SetDefaultDates()
' Author        : Mustaq Hussain
' Date          : 19 October 1995
' Fuction Name  : SetDefaultDates
' Purpose       : Set the From and To dates to the default values

    On Error GoTo Err_SetDefaultDates
    
    With Forms![frmDirectorsMain]
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.value = Format("6/4/" + Format$(![cboTaxYear]), "dd/mm/yyyy")
        Else
            !dtDirectorshipFrom.value = Null
        End If
        !dtDirectorshipTo.value = Format("5/4/" + Format$(![cboTaxYear] + 1), "dd/mm/yyyy")
        
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.Enabled = False
        Else
            !dtDirectorshipFrom.Enabled = True
        End If
        !dtDirectorshipTo.Enabled = True
    End With
    
Exit_SetDefaultDates:
    Exit Sub

Err_SetDefaultDates:
    MsgBox Error$
    Resume Exit_SetDefaultDates

End Sub

Sub SetDefaultDates01()
' Author        : Mustaq Hussain
' Date          : 19 October 1995
' Fuction Name  : SetDefaultDates
' Purpose       : Set the From and To dates to the default values
' Author        : Peter Morton
' Date          : 04 Jan 2001
' Purpose       : Ammended to refer to 2001 form


    On Error GoTo Err_SetDefaultDates01
    With Forms![frmDirectorsMain2001]
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.value = Format("6/4/" + Format$(Forms![frmDirectorsMain2001]![cboTaxYear]), "dd/mm/yyyy")
        Else
            !dtDirectorshipFrom.value = Null
        End If
        !dtDirectorshipTo.value = Format("5/4/" + Format$(Forms![frmDirectorsMain2001]![cboTaxYear] + 1), "dd/mm/yyyy")
        
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.Enabled = False
        Else
            !dtDirectorshipFrom.Enabled = True
        End If
        !dtDirectorshipTo.Enabled = True
    End With
    
Exit_SetDefaultDates01:
    Exit Sub

Err_SetDefaultDates01:
    MsgBox Error$
    Resume Exit_SetDefaultDates01


End Sub
Sub SetDefaultDates03()
' Author        : Mustaq Hussain
' Date          : 19 October 1995
' Fuction Name  : SetDefaultDates
' Purpose       : Set the From and To dates to the default values
' Author        : Peter Morton
' Date          : 04 Jan 2001
' Purpose       : Ammended to refer to 2001 form
' Author        : Chris Schuler
' Date          : 24 Jan 2003
' Purpose       : Ammended to refer to 2003 form
' Author        : Christopher Sneddon
' Date          : 20 March 2009
' Purpose       : Additions for 2009 B~112


    On Error GoTo Err_SetDefaultDates03
    
    
    With Forms![frmDirectorsMain2003]
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.value = Format("6/4/" + Format$(Forms![frmDirectorsMain2003]![cboTaxYear]), "dd/mm/yyyy")
        Else
            !dtDirectorshipFrom.value = Null
        End If
        !dtDirectorshipTo.value = Format("5/4/" + Format$(Forms![frmDirectorsMain2003]![cboTaxYear] + 1), "dd/mm/yyyy")
        
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.Enabled = False
        Else
            !dtDirectorshipFrom.Enabled = True
        End If
        !dtDirectorshipTo.Enabled = True
    End With

Exit_SetDefaultDates03:
    Exit Sub

Err_SetDefaultDates03:
    MsgBox Error$
    Resume Exit_SetDefaultDates03


End Sub

Sub SetDefaultDates16()
' Author        : Christopher Sneddon
' Date          : 18 november 2015
' Fuction Name  : SetDefaultDates
' Purpose       : Set the From and To dates to the default values


    On Error GoTo Err_SetDefaultDates16
    
    With Forms![frmDirectorsMain2016]
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.value = Format("6/4/" + Format$(Forms![frmDirectorsMain2016]![cboTaxYear]), "dd/mm/yyyy")
        Else
            !dtDirectorshipFrom.value = Null
        End If
        !dtDirectorshipTo.value = Format("5/4/" + Format$(Forms![frmDirectorsMain2016]![cboTaxYear] + 1), "dd/mm/yyyy")
        
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.Enabled = False
        Else
            !dtDirectorshipFrom.Enabled = True
        End If
        !dtDirectorshipTo.Enabled = True
    End With
    
Exit_SetDefaultDates16:
    Exit Sub

Err_SetDefaultDates16:
    MsgBox Error$
    Resume Exit_SetDefaultDates16

End Sub

Sub SetDefaultDates09()
' Author        : Christopher Sneddon
' Date          : 09 february 2009
' Fuction Name  : SetDefaultDates
' Purpose       : Set the From and To dates to the default values


    On Error GoTo Err_SetDefaultDates09
    
    With Forms![frmDirectorsMain2009]
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.value = Format("6/4/" + Format$(Forms![frmDirectorsMain2009]![cboTaxYear]), "dd/mm/yyyy")
        Else
            !dtDirectorshipFrom.value = Null
        End If
        !dtDirectorshipTo.value = Format("5/4/" + Format$(Forms![frmDirectorsMain2009]![cboTaxYear] + 1), "dd/mm/yyyy")
        
        If !optEarningsPeriod = cAnnualEarnings Then
            !dtDirectorshipFrom.Enabled = False
        Else
            !dtDirectorshipFrom.Enabled = True
        End If
        !dtDirectorshipTo.Enabled = True
    End With
    
Exit_SetDefaultDates09:
    Exit Sub

Err_SetDefaultDates09:
    MsgBox Error$
    Resume Exit_SetDefaultDates09

End Sub
Sub ShowTotalContributions(ByVal nContributions1 As Currency, ByVal nContributions2 As Currency, ByVal nContributions3 As Currency, ByVal nContributions4 As Currency, ByVal nContributions5 As Currency)
' Author        : Mustaq Hussain
' Date          : 07 June 1995
' Fuction Name  : ShowTotalContributions
' Purpose       : Show the total contributions, including employee and employer contributions

    Dim nTotal_Contributions As Currency, nEE_Contributions As Currency, nER_Contributions As Currency
    Dim nPrimary As Currency, nGross

    On Error GoTo Err_ShowTotalContributions

    nPrimary = nContributions1 + nContributions2
    nTotal_Contributions = nContributions1 + nContributions2 + nContributions3 + nContributions4 + nContributions5

    Forms![frmDirectorsMain]![nTotalContributions] = nTotal_Contributions
    Forms![frmDirectorsMain]![nTotalEEContributions] = nContributions1 + nContributions2
    Forms![frmDirectorsMain]![nTotalERContributions] = nContributions3 + nContributions4 + nContributions5



Exit_ShowTotalContributions:
    Exit Sub

Err_ShowTotalContributions:
    MsgBox Error$
    Resume Exit_ShowTotalContributions


End Sub

Function TaxYearCatCombinationInvalid() As Integer

' Author    : Lisa Scothern
' Date      : 21/05/97
' Purpose   : Check whether a newly selected tax year makes a previously selected category invalid
'           : If it does, return True, else return False if all previously selected categories are OK

    On Error GoTo Err_TaxYearCat

    Dim myDB As Database, mySet As DAO.Recordset
    Dim BoolInvalid As Integer

    If Forms!frmDirectorsMain!cboTaxYear < 1997 Then
        BoolInvalid = True     ' be pessimistic!
    Else
        BoolInvalid = False    ' All categories valid for '97 onwards
        GoTo Exit_TaxYearCat
    End If


    Set myDB = DBEngine.Workspaces(0).Databases(0)
    Set mySet = myDB.OpenRecordset("SELECT [Category] FROM [DIRECTORS CONTRIBUTIONS TABLE]")

    If mySet.Recordcount = 0 Then
        BoolInvalid = False   ' Contributions have already been cleared, no categories to check - OK
        mySet.Close
        myDB.Close
        GoTo Exit_TaxYearCat
    End If

    mySet.MoveFirst
    Do Until mySet.EOF
        Select Case mySet![Category]
            Case "F", "G", "S"
                GoTo Invalid_TaxYearCat
        End Select

        mySet.MoveNext
    Loop
    BoolInvalid = False   ' As invalid category for this tax year was NOT found - everything OK
    GoTo Closedown_DB

Invalid_TaxYearCat:
    BoolInvalid = True
    MsgBox "A calculation for this category is not appropriate for this tax year.", 48
    ClearForm

Closedown_DB:
    mySet.Close
   

Exit_TaxYearCat:
    TaxYearCatCombinationInvalid = BoolInvalid
    Exit Function

Err_TaxYearCat:
    MsgBox Error$
    Resume Exit_TaxYearCat

End Function

Sub UpdateAboveUELContrubutionsRecord(mySet As DAO.Recordset, ByVal PercentageAbove As Double, ByVal amountAbove As Currency, ByVal Amount As Currency)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : UpdateAboveUELContrubutionsRecord
' Purpose       : Update the current details record of the contributions made above the UEL
    
    On Error GoTo Err_UpdateAboveUELContrubutionsRecord

    ' Update fields
    mySet![Above % UEL] = PercentageAbove
    mySet![Above UEL] = amountAbove
    mySet![Above UEL Amount] = Amount

Exit_UpdateAboveUELContrubutionsRecord:
    Exit Sub

Err_UpdateAboveUELContrubutionsRecord:
    MsgBox Error$
    Resume Exit_UpdateAboveUELContrubutionsRecord

End Sub

Sub UpdateIndividualRecord(mySet As DAO.Recordset, Category, NotContractedEmployeeEarnings, ContractedEmployeeEarnings, ContractedEmployeeEarningsAboveLEL, nContributions1, nContributions2, nContributions3, nContributions4, nContributions5, nContributions6)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : UpdateIndividualRecord
' Purpose       : Update the current details record of the contributions made
' History Date  : 09 June 1995
'               : Correct contribution stored in [C/O NI]
' History Date  : 10 October 1995
'               : [C/O NI] should be Employee contributions for D or E
' History Date  : 19 May 1997
' Author        : Lisa Scothern
'               : Added categories 'F', 'G' & 'S' to C/O Employee contributions


    Dim nPrimary As Currency, nTotal_Contributions As Currency
    
    On Error GoTo Err_UpdateIndividualRecord

    nPrimary = nContributions1 + nContributions2
    nTotal_Contributions = nContributions1 + nContributions2 + nContributions3 + nContributions4 + nContributions5


    If Category = "D" Or Category = "E" Or Category = "F" Or Category = "G" Or Category = "S" Then
    
        mySet![Earnings] = ContractedEmployeeEarnings
        mySet![Total Cont] = nTotal_Contributions
        mySet![EE Cont] = nPrimary
        mySet![ER Cont] = nTotal_Contributions - nPrimary
        mySet![C/O Earns] = ContractedEmployeeEarningsAboveLEL
        mySet![C/O NI] = nContributions6
    
    Else

        mySet![Earnings] = NotContractedEmployeeEarnings
        mySet![Total Cont] = nTotal_Contributions
        mySet![EE Cont] = nPrimary
        mySet![ER Cont] = nTotal_Contributions - nPrimary

        mySet![C/O Earns] = 0
        mySet![C/O NI] = 0

    End If


Exit_UpdateIndividualRecord:
    Exit Sub

Err_UpdateIndividualRecord:
    MsgBox Error$
    Resume Exit_UpdateIndividualRecord

End Sub

Sub UpdateLELContrubutionsRecord(mySet As DAO.Recordset, ByVal PercentageEE As Double, ByVal amountEE As Currency, ByVal PercentageER As Double, ByVal amountER As Currency, ByVal Amount As Currency)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : UpdateLELContrubutionsRecord
' Purpose       : Update the current details record of the contributions made to show LEL contributions
    
    On Error GoTo Err_UpdateLELContrubutionsRecord

    mySet![Employee % LEL] = PercentageEE
    mySet![Employee LEL] = amountEE
    mySet![Employee LEL Amount] = Amount
    
    mySet![Employer % LEL] = PercentageER
    mySet![Employer LEL] = amountER
    mySet![Employer LEL Amount] = Amount

Exit_UpdateLELContrubutionsRecord:
    Exit Sub

Err_UpdateLELContrubutionsRecord:
    MsgBox Error$
    Resume Exit_UpdateLELContrubutionsRecord

End Sub

Sub UpdatePaymentsMade()
' Author        : Mustaq Hussain/JASON CORDEY
' Date          : 17 May 1995
' Fuction Name  : UpdatePaymentsMade
' Purpose       : Calculate payments from payments made and post summary
' History Date  : 16 June 1995
'               : To reflect DCS 273, which was for PCG ( it would zero under/over payments )
    
    Dim Employerspayment As Currency, curTemp As Currency
    Dim Employeespayment As Currency
    Dim Totalpayment As Currency
    
    On Error GoTo Err_calcTotals
    
    ' Calculate ER from Total and EE
    CalculateERNIPaid
    
    
    'cater for user deleting these entires
    If IsNull(Forms![frmDirectorsMain]![nNITotalPaid]) Then
        Forms![frmDirectorsMain]![nNITotalPaid] = 0
    End If
    If IsNull(Forms![frmDirectorsMain]![nEENITotalPaid]) Then
        Forms![frmDirectorsMain]![nEENITotalPaid] = 0
    End If
    
EmployerTotal:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employers Over/Under payment
    '_______________________________________________________________________________________
    
'    curTemp = forms![frmDirectorsMain]![nTotalContributionsContractedOut] + forms![frmDirectorsMain]![nTotalContributionsNotContractedOut]
'    curTemp = curTemp - forms![frmDirectorsMain]![nPrimaryContractedOut] - forms![frmDirectorsMain]![nPrimaryNotContractedOut]
    curTemp = Forms![frmDirectorsMain]![nTotalContributions] - Forms![frmDirectorsMain]![nTotalEEContributions]
    If curTemp = 0 Then
        Forms![frmDirectorsMain]![nERNIUnderpayment] = 0
        Forms![frmDirectorsMain]![nERNIOverpayment] = 0
        GoTo EmployeeTotal:
    Else
        
        Employerspayment = curTemp - Forms![frmDirectorsMain]![nERNITotalPaid]
    End If
    
    If Employerspayment < 0 Then
        Forms![frmDirectorsMain]![nERNIUnderpayment] = 0
        Forms![frmDirectorsMain]![nERNIOverpayment] = -(Employerspayment)
    Else
        Forms![frmDirectorsMain]![nERNIUnderpayment] = Employerspayment
        Forms![frmDirectorsMain]![nERNIOverpayment] = 0
    End If
    
        
    
    
EmployeeTotal:
    '_______________________________________________________________________________________
    
    ' This section calculates the Employees Over/Under payment
    '_______________________________________________________________________________________
    
'    curTemp = forms![frmDirectorsMain]![nPrimaryContractedOut] + forms![frmDirectorsMain]![nPrimaryNotContractedOut]
    curTemp = Forms![frmDirectorsMain]![nTotalEEContributions]
    If curTemp = 0 Then
        Forms![frmDirectorsMain]![nEENIUnderpayment] = 0
        Forms![frmDirectorsMain]![nEENIOverpayment] = 0
        GoTo Overalltotal:
    Else
        Employeespayment = curTemp - Forms![frmDirectorsMain]![nEENITotalPaid]
    End If
    
    If Employeespayment < 0 Then
        Forms![frmDirectorsMain]![nEENIUnderpayment] = 0
        Forms![frmDirectorsMain]![nEENIOverpayment] = -(Employeespayment)
    Else
        Forms![frmDirectorsMain]![nEENIUnderpayment] = Employeespayment
        Forms![frmDirectorsMain]![nEENIOverpayment] = 0
    End If
    
    
    
Overalltotal:
    '_______________________________________________________________________________________
    
    ' This section calculates the Total Over/Under payment
    '_______________________________________________________________________________________
        
'    curTemp = forms![frmDirectorsMain]![nTotalContributionsContractedOut] + forms![frmDirectorsMain]![nTotalContributionsNotContractedOut]
    curTemp = Forms![frmDirectorsMain]![nTotalContributions]
    
    If curTemp = 0 Then
        Forms![frmDirectorsMain]![nNITotalUnderpayment] = 0
        Forms![frmDirectorsMain]![nNITotalOverpayment] = 0
        GoTo validatetotals:
    Else
        Totalpayment = (curTemp - (Forms![frmDirectorsMain]![nERNITotalPaid] + Forms![frmDirectorsMain]![nEENITotalPaid]))
    End If
        
    If Totalpayment < 0 Then
        Forms![frmDirectorsMain]![nNITotalUnderpayment] = 0
        Forms![frmDirectorsMain]![nNITotalOverpayment] = -(Totalpayment)
    Else
        Forms![frmDirectorsMain]![nNITotalUnderpayment] = Totalpayment
        Forms![frmDirectorsMain]![nNITotalOverpayment] = 0
    End If
    
    
validatetotals:
    '_______________________________________________________________________________________
    
    ' This section validates the Total Over/Under payments
    '_______________________________________________________________________________________
        
    ' Modified to reflect DCS 273 - which was for PCG.
    If (Employerspayment < 0) And (Employeespayment > 0) Then
'        forms![frmDirectorsMain]![nNITotalUnderpayment] = 0
'        forms![frmDirectorsMain]![nNITotalOverpayment] = 0
    End If


Exit_calcTotals:
    Exit Sub

Err_calcTotals:
    MsgBox Error$
    Resume Exit_calcTotals

End Sub

Sub UpdateUELContrubutionsRecord(mySet As DAO.Recordset, ByVal PercentageEE As Double, ByVal amountEE As Currency, ByVal PercentageER As Double, ByVal amountER As Currency, ByVal Amount As Currency)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : UpdateUELContrubutionsRecord
' Purpose       : Update the current details record of the contributions made to show UEL contributions
    
    On Error GoTo Err_UpdateUELContrubutionsRecord

    mySet![Employee % UEL] = PercentageEE
    mySet![Employee UEL] = amountEE
    mySet![Employee UEL Amount] = Amount
    
    mySet![Employer % UEL] = PercentageER
    mySet![Employer UEL] = amountER
    mySet![Employer UEL Amount] = Amount

Exit_UpdateUELContrubutionsRecord:
    Exit Sub

Err_UpdateUELContrubutionsRecord:
    MsgBox Error$
    Resume Exit_UpdateUELContrubutionsRecord

End Sub

Sub UseClass_1_Rate(ByVal nYear As Integer, ByVal sCategory As String, ByVal nRateRequired As Integer, ByVal nBand As Integer, Percentage As Double)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : UseClass_1_Rate
' Purpose       : Get Percentage from Class 1 Rate table
' History Date  : 18 September 1995
'               : Allow for calculation where start of Directorship does not straddle split year
' History Date  : 9 October 1995
'               : Allow for calculation where end of Directorship in first period for split years
' History Date  : 19 October 1995
'               : Checks Annual 'To' for split years
' History Date  : 31 October 1995
'               : Split has average using three periods (82 & 83)
' History Date  : 16 October 1995
'               : The [CLASS 1 RATE TABLE] use the PAYE Calender not the normal calender
' History Date  : 21 July 2003
'               : Two digit years changed to four digit years - v1073366 Chris schuler

    Dim myDB As Database, mySet As DAO.Recordset
    Dim sYear As String, SQLQuery As String, sColumn As String

    Dim nMonth As Integer, nDay As Integer, nStart As Integer, nStartMonth As Integer, nYearPro As Integer

    Dim bAveragePercentage As Integer
    
    Dim vReturnedValue As Variant
    
    On Error GoTo Err_Class_1_Rate


    ' Need to convert Tax Yr into a string, without a leading space
    sYear = Mid(Str(nYear), 2, 5)
    

    ' Construct field to lookup
    Select Case nRateRequired

        Case cLELEmployee:  sColumn = IIf(nYear > 1984, "[Up to LEL" + Mid(Str(nBand), 2, 3) + " (employee)]", "[Up to LEL1 (employee)]")

        Case cUELEmployee:  sColumn = IIf(nYear > 1984, "[Employee Rte" + Str(nBand) + "]", "[Employee Rte 1]")
        
        Case cLELEmployer:  sColumn = IIf(nYear > 1984, "[Up to LEL" + Mid(Str(nBand), 2, 3) + " (employer)]", "[Up to LEL1 (employer)]")

        Case cUELEmployer:  sColumn = IIf(nYear > 1984, "[Employer Rte" + Str(nBand) + "]", "[Employer Rte 4]")

        Case cAboveUEL:     sColumn = IIf(nYear > 1984, "[Above UEL (employer)]", "*")

    End Select


    ' Check for years without UEL
    If nRateRequired = cAboveUEL And nYear < 1985 Then
    
        Percentage = 0
        
    Else
        
        ' Query to get the Annual Bands for [Tax Yr]
        SQLQuery = "SELECT [Start Week], [Start Month], " + sColumn + " FROM [CLASS 1 RATE TABLE]"
        SQLQuery = SQLQuery + "WHERE [Tax Yr] = '" + sYear + "' AND [Cat] = '" + sCategory + "';"
        

        Set myDB = DBEngine.Workspaces(0).Databases(0)
        Set mySet = myDB.OpenRecordset(SQLQuery)
    
        mySet.MoveFirst
         
        ' Ensure NULL treated as 0
        vReturnedValue = mySet.Fields(2).value
        If IsNull(vReturnedValue) Then
            Percentage = 0
        Else
            Percentage = vReturnedValue
        End If


        ' Check for split periods
        mySet.MoveLast
        If mySet.Recordcount > 1 Then
            'Is a split period

            ' Check for Directorship straddlling split years
    
            ' From Dates
            nMonth = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "mm"))
            nDay = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "dd"))
            nYearPro = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "yyyy"))
        
            ' CLASS 1 RATE TABLE in PAYE Calender, convert to normal calender
            ' Ensure NULL treated as 0
            vReturnedValue = mySet.Fields(0).value
            nStart = IIf(IsNull(vReturnedValue), 5, vReturnedValue)

             ' Convert to normal calender
            If nStart = 18 Then
                nStart = 3
                nStartMonth = 8
            Else
                nStart = 5
                nStartMonth = 10
            End If

            ' Check to see if start in second period
            If (nMonth > nStartMonth) Or (nMonth = nStartMonth And nDay >= nStart) Or (nYearPro > nYear) Then
                ' Percentage is second record
                bAveragePercentage = False
            Else
                ' Either in First or staddles

                ' To Dates
                nMonth = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipTo, "mm"))
                nDay = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipTo, "dd"))
                nYearPro = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipTo, "yyyy"))
                
                ' Check to see if start in First
                If (nMonth < nStartMonth And nYearPro = nYear) Or (nMonth = nStartMonth And nDay < nStart And nYearPro = nYear) Then
                    ' Percentage is first record
                    bAveragePercentage = False
                Else

                ' Does straddle so average Percentage rate
                bAveragePercentage = True
                End If
            End If


            ' Calculate Percentage
            If bAveragePercentage = True Then
                ' Does straddle, or is an annual period so average Percentage rate
                vReturnedValue = mySet.Fields(2).value
                         
                If nStartMonth = 8 Then
                    ' Average over three periods
                    Percentage = IIf(IsNull(vReturnedValue), Percentage, (Percentage + vReturnedValue + vReturnedValue) / 3)
                    Percentage = Int(Percentage * 10000 + 0.5) / 10000
                Else
                    ' Average over two periods
                    Percentage = IIf(IsNull(vReturnedValue), Percentage, (Percentage + vReturnedValue) / 2)
                End If

            Else
                ' Does not staddle, percentage is first or second record
                ' From Date
                nMonth = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "mm"))
                nDay = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "dd"))
                nYearPro = Val(Format$(Forms![frmDirectorsMain]!dtDirectorshipFrom, "yyyy"))

                ' Is it within second period?
                If (nMonth > nStartMonth) Or (nMonth = nStartMonth And nDay >= nStart) Or (nYearPro > nYear) Then
                    ' Percentage is second
                    ' Ensure NULL treated as 0
                    vReturnedValue = mySet.Fields(2).value
                    Percentage = IIf(IsNull(vReturnedValue), 0, vReturnedValue)
                Else
                    ' Percentage is first which was assigned initially
                    Percentage = Percentage
                End If

            End If ' Calculate Percentage


        End If ' Finish split year


    End If

Exit_Class_1_Rate:
    Exit Sub

Err_Class_1_Rate:
    MsgBox Error$
    Resume Exit_Class_1_Rate

End Sub

Sub ZeroContributionsRecord(mySet As DAO.Recordset)
' Author        : Mustaq Hussain
' Date          : 17 May 1995
' Fuction Name  : ZeroContributionsRecord
' Purpose       : Zero all the details of the current details
    
    
    On Error GoTo Err_ZeroContributionsRecord
    
    mySet![Employee % LEL] = 0
    mySet![Employee LEL] = 0
    mySet![Employee % UEL] = 0
    mySet![Employee UEL] = 0
    mySet![Employer % LEL] = 0
    mySet![Employer LEL] = 0
    mySet![Employer % UEL] = 0
    mySet![Employer UEL] = 0
    mySet![Above % UEL] = 0
    mySet![Above UEL] = 0
    
    mySet![Employee LEL Amount] = 0
    mySet![Employee UEL Amount] = 0
    mySet![Employer LEL Amount] = 0
    mySet![Employer UEL Amount] = 0
    mySet![Above UEL Amount] = 0

    mySet![Earnings] = 0
    mySet![Total Cont] = 0
    mySet![EE Cont] = 0
    mySet![ER Cont] = 0
    mySet![C/O Earns] = 0
    mySet![C/O NI] = 0

Exit_ZeroContributionsRecord:
    Exit Sub

Err_ZeroContributionsRecord:
    MsgBox Error$
    Resume Exit_ZeroContributionsRecord

End Sub
